
UART_BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800066  00800066  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142a  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a38  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aca  00000000  00000000  00002692  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d4  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000864  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_12>
  34:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_13>
  38:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_14>
  3c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  8a:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TX_SetFlag>:
		 gpu8_PointerToBuffer = pu8_Data;
		 gu16_NumberOfBytes = u16_NumberOfBytes;
	 }

	return ERR;
}
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu8_TXC_Flag>
  98:	08 95       	ret

0000009a <RX_SetFlag>:
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_RXC_Flag>
  a0:	08 95       	ret

000000a2 <BCM_Init>:
  a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BCM_Config>
  a6:	88 23       	and	r24, r24
  a8:	21 f0       	breq	.+8      	; 0xb2 <BCM_Init+0x10>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	09 f4       	brne	.+2      	; 0xb0 <BCM_Init+0xe>
  ae:	40 c0       	rjmp	.+128    	; 0x130 <BCM_Init+0x8e>
  b0:	6a c0       	rjmp	.+212    	; 0x186 <BCM_Init+0xe4>
  b2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <BCM_Config+0x1>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	19 f0       	breq	.+6      	; 0xc0 <BCM_Init+0x1e>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	e9 f0       	breq	.+58     	; 0xf8 <BCM_Init+0x56>
  be:	65 c0       	rjmp	.+202    	; 0x18a <BCM_Init+0xe8>
  c0:	e7 e8       	ldi	r30, 0x87	; 135
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
  c6:	11 82       	std	Z+1, r1	; 0x01
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	82 83       	std	Z+2, r24	; 0x02
  cc:	13 82       	std	Z+3, r1	; 0x03
  ce:	14 82       	std	Z+4, r1	; 0x04
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	85 83       	std	Z+5, r24	; 0x05
  d4:	16 82       	std	Z+6, r1	; 0x06
  d6:	17 82       	std	Z+7, r1	; 0x07
  d8:	10 86       	std	Z+8, r1	; 0x08
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	81 87       	std	Z+9, r24	; 0x09
  de:	13 86       	std	Z+11, r1	; 0x0b
  e0:	12 86       	std	Z+10, r1	; 0x0a
  e2:	89 e4       	ldi	r24, 0x49	; 73
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	95 87       	std	Z+13, r25	; 0x0d
  e8:	84 87       	std	Z+12, r24	; 0x0c
  ea:	17 86       	std	Z+15, r1	; 0x0f
  ec:	16 86       	std	Z+14, r1	; 0x0e
  ee:	cf 01       	movw	r24, r30
  f0:	0e 94 24 02 	call	0x448	; 0x448 <USART_Init>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	08 95       	ret
  f8:	e7 e8       	ldi	r30, 0x87	; 135
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	12 82       	std	Z+2, r1	; 0x02
 104:	13 82       	std	Z+3, r1	; 0x03
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	84 83       	std	Z+4, r24	; 0x04
 10a:	15 82       	std	Z+5, r1	; 0x05
 10c:	16 82       	std	Z+6, r1	; 0x06
 10e:	17 82       	std	Z+7, r1	; 0x07
 110:	10 86       	std	Z+8, r1	; 0x08
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	81 87       	std	Z+9, r24	; 0x09
 116:	13 86       	std	Z+11, r1	; 0x0b
 118:	12 86       	std	Z+10, r1	; 0x0a
 11a:	15 86       	std	Z+13, r1	; 0x0d
 11c:	14 86       	std	Z+12, r1	; 0x0c
 11e:	8d e4       	ldi	r24, 0x4D	; 77
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	97 87       	std	Z+15, r25	; 0x0f
 124:	86 87       	std	Z+14, r24	; 0x0e
 126:	cf 01       	movw	r24, r30
 128:	0e 94 24 02 	call	0x448	; 0x448 <USART_Init>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret
 130:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <BCM_Config+0x1>
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	19 f0       	breq	.+6      	; 0x13e <BCM_Init+0x9c>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	99 f0       	breq	.+38     	; 0x162 <BCM_Init+0xc0>
 13c:	28 c0       	rjmp	.+80     	; 0x18e <BCM_Init+0xec>
 13e:	e7 e9       	ldi	r30, 0x97	; 151
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 83       	st	Z, r24
 146:	81 83       	std	Z+1, r24	; 0x01
 148:	12 82       	std	Z+2, r1	; 0x02
 14a:	13 82       	std	Z+3, r1	; 0x03
 14c:	84 83       	std	Z+4, r24	; 0x04
 14e:	15 82       	std	Z+5, r1	; 0x05
 150:	89 e4       	ldi	r24, 0x49	; 73
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	97 83       	std	Z+7, r25	; 0x07
 156:	86 83       	std	Z+6, r24	; 0x06
 158:	cf 01       	movw	r24, r30
 15a:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_Init>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	08 95       	ret
 162:	e7 e9       	ldi	r30, 0x97	; 151
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	81 83       	std	Z+1, r24	; 0x01
 16c:	12 82       	std	Z+2, r1	; 0x02
 16e:	13 82       	std	Z+3, r1	; 0x03
 170:	84 83       	std	Z+4, r24	; 0x04
 172:	15 82       	std	Z+5, r1	; 0x05
 174:	8d e4       	ldi	r24, 0x4D	; 77
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	97 83       	std	Z+7, r25	; 0x07
 17a:	86 83       	std	Z+6, r24	; 0x06
 17c:	cf 01       	movw	r24, r30
 17e:	0e 94 9e 01 	call	0x33c	; 0x33c <SPI_Init>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret

00000192 <BCM_RxDispatch>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <BCM_RxDispatch+0x6>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	19 82       	std	Y+1, r1	; 0x01
 19e:	1a 82       	std	Y+2, r1	; 0x02
 1a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BCM_Config>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	09 f0       	breq	.+2      	; 0x1aa <BCM_RxDispatch+0x18>
 1a8:	81 c0       	rjmp	.+258    	; 0x2ac <BCM_RxDispatch+0x11a>
 1aa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <BCM_Config+0x1>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <BCM_RxDispatch+0x22>
 1b2:	7c c0       	rjmp	.+248    	; 0x2ac <BCM_RxDispatch+0x11a>
 1b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8_RXC_Flag>
 1b8:	88 23       	and	r24, r24
 1ba:	09 f4       	brne	.+2      	; 0x1be <BCM_RxDispatch+0x2c>
 1bc:	77 c0       	rjmp	.+238    	; 0x2ac <BCM_RxDispatch+0x11a>
 1be:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8_RXC_Flag>
 1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	85 30       	cpi	r24, 0x05	; 5
 1c8:	c1 f1       	breq	.+112    	; 0x23a <BCM_RxDispatch+0xa8>
 1ca:	86 30       	cpi	r24, 0x06	; 6
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <BCM_RxDispatch+0x3e>
 1ce:	65 c0       	rjmp	.+202    	; 0x29a <BCM_RxDispatch+0x108>
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <BCM_RxDispatch+0x44>
 1d4:	6b c0       	rjmp	.+214    	; 0x2ac <BCM_RxDispatch+0x11a>
 1d6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u8_Dispatch_enterence_counter.1712>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	61 f0       	breq	.+24     	; 0x1f6 <BCM_RxDispatch+0x64>
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <BCM_RxDispatch+0x54>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	b1 f0       	breq	.+44     	; 0x210 <BCM_RxDispatch+0x7e>
 1e4:	63 c0       	rjmp	.+198    	; 0x2ac <BCM_RxDispatch+0x11a>
 1e6:	8b e6       	ldi	r24, 0x6B	; 107
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_ReceiveChar>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u8_Dispatch_enterence_counter.1712>
 1f4:	5b c0       	rjmp	.+182    	; 0x2ac <BCM_RxDispatch+0x11a>
 1f6:	ce 01       	movw	r24, r28
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_ReceiveChar>
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <u16_ReceivedDataSize.1714>
 204:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u16_ReceivedDataSize.1714+0x1>
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u8_Dispatch_enterence_counter.1712>
 20e:	4e c0       	rjmp	.+156    	; 0x2ac <BCM_RxDispatch+0x11a>
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_ReceiveChar>
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u16_ReceivedDataSize.1714>
 21e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <u16_ReceivedDataSize.1714+0x1>
 222:	82 0f       	add	r24, r18
 224:	91 1d       	adc	r25, r1
 226:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <u16_ReceivedDataSize.1714+0x1>
 22a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <u16_ReceivedDataSize.1714>
 22e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <u8_Dispatch_enterence_counter.1712>
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 238:	39 c0       	rjmp	.+114    	; 0x2ac <BCM_RxDispatch+0x11a>
 23a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <u16_DataBufferIndex.1710>
 23e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <u16_DataBufferIndex.1710+0x1>
 242:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <u16_ReceivedDataSize.1714>
 246:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <u16_ReceivedDataSize.1714+0x1>
 24a:	82 17       	cp	r24, r18
 24c:	93 07       	cpc	r25, r19
 24e:	f0 f4       	brcc	.+60     	; 0x28c <BCM_RxDispatch+0xfa>
 250:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <gpu8_PointerToBuffer>
 254:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <gpu8_PointerToBuffer+0x1>
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_ReceiveChar>
 260:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <u16_DataBufferIndex.1710>
 264:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <u16_DataBufferIndex.1710+0x1>
 268:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <gpu8_PointerToBuffer>
 26c:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <gpu8_PointerToBuffer+0x1>
 270:	e8 0f       	add	r30, r24
 272:	f9 1f       	adc	r31, r25
 274:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <__data_end>
 278:	20 81       	ld	r18, Z
 27a:	23 0f       	add	r18, r19
 27c:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <u16_DataBufferIndex.1710+0x1>
 286:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <u16_DataBufferIndex.1710>
 28a:	10 c0       	rjmp	.+32     	; 0x2ac <BCM_RxDispatch+0x11a>
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8_RXC_Flag>
 298:	09 c0       	rjmp	.+18     	; 0x2ac <BCM_RxDispatch+0x11a>
 29a:	ce 01       	movw	r24, r28
 29c:	02 96       	adiw	r24, 0x02	; 2
 29e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_ReceiveChar>
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	8a bb       	out	0x1a, r24	; 26
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <BCM_Receive>:

ERROR_STATUS BCM_Receive(uint8_t* pu8_Data)
{
 2ba:	9c 01       	movw	r18, r24
	ERROR_STATUS ERR = E_OK;
	
	if (gu8_FSM_Status == IDLE)
 2bc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c0:	9f 3f       	cpi	r25, 0xFF	; 255
 2c2:	39 f4       	brne	.+14     	; 0x2d2 <BCM_Receive+0x18>
	{
		gu8_FSM_Status = START_RECEIVING;
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		gpu8_PointerToBuffer = pu8_Data;
 2ca:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <gpu8_PointerToBuffer+0x1>
 2ce:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <gpu8_PointerToBuffer>
	return ERR;
		/*
		set FSM to RECEIVING
		set global pointer to pu8_Data
	*/
}
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	08 95       	ret

000002d6 <main>:

uint8_t data[BUFFER_LENGTH]={0};


int main (void)
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	60 97       	sbiw	r28, 0x10	; 16
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
		/************************************/
		/*			SLAVE					*/
		/************************************/
	uint8_t iteration = 0;

	ENABLE_GINT;
 2ea:	8f b7       	in	r24, 0x3f	; 63
 2ec:	80 68       	ori	r24, 0x80	; 128
 2ee:	8f bf       	out	0x3f, r24	; 63
	strUSART_Config_t USART_Config = {
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	20 e1       	ldi	r18, 0x10	; 16
 2f6:	fc 01       	movw	r30, r24
 2f8:	11 92       	st	Z+, r1
 2fa:	2a 95       	dec	r18
 2fc:	e9 f7       	brne	.-6      	; 0x2f8 <main+0x22>
 2fe:	28 e0       	ldi	r18, 0x08	; 8
 300:	2e 83       	std	Y+6, r18	; 0x06
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	2a 87       	std	Y+10, r18	; 0x0a
		USART_ASYNC,
		USART_NO_PARITY,
		USART_1_STOP_BIT,
		USART_8_BIT_CHR
	};
	USART_Init(&USART_Config);
 306:	0e 94 24 02 	call	0x448	; 0x448 <USART_Init>
	BCM_Init();
 30a:	0e 94 51 00 	call	0xa2	; 0xa2 <BCM_Init>
	BCM_Receive (data);
 30e:	80 e7       	ldi	r24, 0x70	; 112
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 5d 01 	call	0x2ba	; 0x2ba <BCM_Receive>
	
	
	uint8_t status = START_SENDING;
 316:	11 e0       	ldi	r17, 0x01	; 1
int main (void)
{
		/************************************/
		/*			SLAVE					*/
		/************************************/
	uint8_t iteration = 0;
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	03 c0       	rjmp	.+6      	; 0x322 <main+0x4c>
	while(1)
	{
	    
		while (status != IDLE)
		{
			status = BCM_RxDispatch();
 31c:	0e 94 c9 00 	call	0x192	; 0x192 <BCM_RxDispatch>
 320:	18 2f       	mov	r17, r24
	uint8_t status = START_SENDING;
	
	while(1)
	{
	    
		while (status != IDLE)
 322:	1f 3f       	cpi	r17, 0xFF	; 255
 324:	d9 f7       	brne	.-10     	; 0x31c <main+0x46>
			status = BCM_RxDispatch();
			
			
		}
		
		if (iteration<BUFFER_LENGTH)
 326:	0a 30       	cpi	r16, 0x0A	; 10
 328:	e0 f7       	brcc	.-8      	; 0x322 <main+0x4c>
		{
			
			USART_SendChar(data[iteration]);
 32a:	e0 2f       	mov	r30, r16
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	e0 59       	subi	r30, 0x90	; 144
 330:	ff 4f       	sbci	r31, 0xFF	; 255
 332:	80 81       	ld	r24, Z
 334:	0e 94 57 02 	call	0x4ae	; 0x4ae <USART_SendChar>
			iteration++;
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	f3 cf       	rjmp	.-26     	; 0x322 <main+0x4c>

0000033c <SPI_Init>:
	
	
	TCNT0 = x;
	return ERR;
	
}
 33c:	fc 01       	movw	r30, r24
 33e:	89 2b       	or	r24, r25
 340:	e9 f1       	breq	.+122    	; 0x3bc <SPI_Init+0x80>
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	41 f0       	breq	.+16     	; 0x358 <SPI_Init+0x1c>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	51 f4       	brne	.+20     	; 0x360 <SPI_Init+0x24>
 34c:	87 b3       	in	r24, 0x17	; 23
 34e:	80 6d       	ori	r24, 0xD0	; 208
 350:	87 bb       	out	0x17, r24	; 23
 352:	6c 9a       	sbi	0x0d, 4	; 13
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	05 c0       	rjmp	.+10     	; 0x362 <SPI_Init+0x26>
 358:	be 9a       	sbi	0x17, 6	; 23
 35a:	6c 98       	cbi	0x0d, 4	; 13
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	01 c0       	rjmp	.+2      	; 0x362 <SPI_Init+0x26>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	91 81       	ldd	r25, Z+1	; 0x01
 364:	99 23       	and	r25, r25
 366:	21 f0       	breq	.+8      	; 0x370 <SPI_Init+0x34>
 368:	91 30       	cpi	r25, 0x01	; 1
 36a:	21 f4       	brne	.+8      	; 0x374 <SPI_Init+0x38>
 36c:	6f 9a       	sbi	0x0d, 7	; 13
 36e:	03 c0       	rjmp	.+6      	; 0x376 <SPI_Init+0x3a>
 370:	6f 98       	cbi	0x0d, 7	; 13
 372:	01 c0       	rjmp	.+2      	; 0x376 <SPI_Init+0x3a>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	92 81       	ldd	r25, Z+2	; 0x02
 378:	99 23       	and	r25, r25
 37a:	21 f0       	breq	.+8      	; 0x384 <SPI_Init+0x48>
 37c:	91 30       	cpi	r25, 0x01	; 1
 37e:	21 f4       	brne	.+8      	; 0x388 <SPI_Init+0x4c>
 380:	6d 9a       	sbi	0x0d, 5	; 13
 382:	03 c0       	rjmp	.+6      	; 0x38a <SPI_Init+0x4e>
 384:	6d 98       	cbi	0x0d, 5	; 13
 386:	01 c0       	rjmp	.+2      	; 0x38a <SPI_Init+0x4e>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	95 81       	ldd	r25, Z+5	; 0x05
 38c:	99 23       	and	r25, r25
 38e:	19 f0       	breq	.+6      	; 0x396 <SPI_Init+0x5a>
 390:	91 30       	cpi	r25, 0x01	; 1
 392:	19 f0       	breq	.+6      	; 0x39a <SPI_Init+0x5e>
 394:	04 c0       	rjmp	.+8      	; 0x39e <SPI_Init+0x62>
 396:	70 98       	cbi	0x0e, 0	; 14
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <SPI_Init+0x64>
 39a:	70 9a       	sbi	0x0e, 0	; 14
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <SPI_Init+0x64>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	23 81       	ldd	r18, Z+3	; 0x03
 3a2:	92 2f       	mov	r25, r18
 3a4:	9b 7f       	andi	r25, 0xFB	; 251
 3a6:	11 f0       	breq	.+4      	; 0x3ac <SPI_Init+0x70>
 3a8:	98 30       	cpi	r25, 0x08	; 8
 3aa:	51 f4       	brne	.+20     	; 0x3c0 <SPI_Init+0x84>
 3ac:	94 81       	ldd	r25, Z+4	; 0x04
 3ae:	94 30       	cpi	r25, 0x04	; 4
 3b0:	48 f4       	brcc	.+18     	; 0x3c4 <SPI_Init+0x88>
 3b2:	3d b1       	in	r19, 0x0d	; 13
 3b4:	92 2b       	or	r25, r18
 3b6:	93 2b       	or	r25, r19
 3b8:	9d b9       	out	0x0d, r25	; 13
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <SPI_Init+0x8a>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <SPI_Init+0x8a>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <SPI_Init+0x8a>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	26 81       	ldd	r18, Z+6	; 0x06
 3c8:	37 81       	ldd	r19, Z+7	; 0x07
 3ca:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <SPI_CBK+0x1>
 3ce:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <SPI_CBK>
 3d2:	6e 9a       	sbi	0x0d, 6	; 13
 3d4:	08 95       	ret

000003d6 <SPI_ReceiveChar>:

ERROR_STATUS SPI_ReceiveChar(uint8_t* pu8_Data)
{
	ERROR_STATUS ERR = E_OK;
	
	if (SPCR & SPIE)
 3d6:	6f 9b       	sbis	0x0d, 7	; 13
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <SPI_ReceiveChar+0xc>
	{
		*pu8_Data = SPDR ;
 3da:	2f b1       	in	r18, 0x0f	; 15
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <SPI_ReceiveChar+0x16>
	}
	else
	{
		while (TRANSMISSION_NOT_COMPLETE);
 3e2:	77 9b       	sbis	0x0e, 7	; 14
 3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <SPI_ReceiveChar+0xc>
		*pu8_Data = SPDR ;
 3e6:	2f b1       	in	r18, 0x0f	; 15
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
	}
	return ERR;
	
}
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret

000003f0 <__vector_12>:

InterruptServiceRoutine(SPI_STC_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	gu8_SPI_Flag = TRUE;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gu8_SPI_Flag>
	
	if (SPI_CBK != NULL)
 418:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <SPI_CBK>
 41c:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <SPI_CBK+0x1>
 420:	30 97       	sbiw	r30, 0x00	; 0
 422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		SPI_CBK();
 424:	09 95       	icall
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <USART_Init>:
	
	if (pu8_Str == NULL_CHAR)
		u8_FunctionStatus = E_NOK;
		
	return u8_FunctionStatus;
}
 448:	fc 01       	movw	r30, r24
 44a:	9b b1       	in	r25, 0x0b	; 11
 44c:	80 81       	ld	r24, Z
 44e:	89 2b       	or	r24, r25
 450:	8b b9       	out	0x0b, r24	; 11
 452:	91 81       	ldd	r25, Z+1	; 0x01
 454:	82 81       	ldd	r24, Z+2	; 0x02
 456:	89 2b       	or	r24, r25
 458:	93 81       	ldd	r25, Z+3	; 0x03
 45a:	89 2b       	or	r24, r25
 45c:	94 81       	ldd	r25, Z+4	; 0x04
 45e:	89 2b       	or	r24, r25
 460:	95 81       	ldd	r25, Z+5	; 0x05
 462:	89 2b       	or	r24, r25
 464:	8a b9       	out	0x0a, r24	; 10
 466:	90 b5       	in	r25, 0x20	; 32
 468:	86 81       	ldd	r24, Z+6	; 0x06
 46a:	89 2b       	or	r24, r25
 46c:	80 68       	ori	r24, 0x80	; 128
 46e:	97 81       	ldd	r25, Z+7	; 0x07
 470:	89 2b       	or	r24, r25
 472:	91 85       	ldd	r25, Z+9	; 0x09
 474:	89 2b       	or	r24, r25
 476:	80 bd       	out	0x20, r24	; 32
 478:	a1 e8       	ldi	r26, 0x81	; 129
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	82 85       	ldd	r24, Z+10	; 0x0a
 47e:	93 85       	ldd	r25, Z+11	; 0x0b
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	9c 93       	st	X, r25
 484:	8e 93       	st	-X, r24
 486:	84 85       	ldd	r24, Z+12	; 0x0c
 488:	95 85       	ldd	r25, Z+13	; 0x0d
 48a:	13 96       	adiw	r26, 0x03	; 3
 48c:	9c 93       	st	X, r25
 48e:	8e 93       	st	-X, r24
 490:	12 97       	sbiw	r26, 0x02	; 2
 492:	86 85       	ldd	r24, Z+14	; 0x0e
 494:	97 85       	ldd	r25, Z+15	; 0x0f
 496:	15 96       	adiw	r26, 0x05	; 5
 498:	9c 93       	st	X, r25
 49a:	8e 93       	st	-X, r24
 49c:	14 97       	sbiw	r26, 0x04	; 4
 49e:	87 e6       	ldi	r24, 0x67	; 103
 4a0:	89 b9       	out	0x09, r24	; 9
 4a2:	10 bc       	out	0x20, r1	; 32
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	ef 2b       	or	r30, r31
 4a8:	09 f4       	brne	.+2      	; 0x4ac <USART_Init+0x64>
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	08 95       	ret

000004ae <USART_SendChar>:
 4ae:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <u8_1stTimeFlag.1624>
 4b2:	99 23       	and	r25, r25
 4b4:	61 f0       	breq	.+24     	; 0x4ce <USART_SendChar+0x20>
 4b6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u8_1stTimeFlag.1624>
 4ba:	56 9b       	sbis	0x0a, 6	; 10
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <USART_SendChar+0x18>
 4be:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <gu8_UDRE_flag>
 4c2:	8c b9       	out	0x0c, r24	; 12
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <USART_SendChar+0x46>
 4c6:	5d 9b       	sbis	0x0b, 5	; 11
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <USART_SendChar+0x18>
 4ca:	8c b9       	out	0x0c, r24	; 12
 4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <USART_SendChar+0x46>
 4ce:	56 9b       	sbis	0x0a, 6	; 10
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <USART_SendChar+0x40>
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <x.1625>
 4d8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <gu8_TXC_flag>
 4dc:	99 23       	and	r25, r25
 4de:	51 f0       	breq	.+20     	; 0x4f4 <USART_SendChar+0x46>
 4e0:	93 e0       	ldi	r25, 0x03	; 3
 4e2:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <x.1625>
 4e6:	8c b9       	out	0x0c, r24	; 12
 4e8:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <gu8_TXC_flag>
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <USART_SendChar+0x46>
 4ee:	5d 9b       	sbis	0x0b, 5	; 11
 4f0:	fe cf       	rjmp	.-4      	; 0x4ee <USART_SendChar+0x40>
 4f2:	8c b9       	out	0x0c, r24	; 12
 4f4:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <x.1625>
 4f8:	82 bf       	out	0x32, r24	; 50
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret

000004fe <__vector_13>:

InterruptServiceRoutine(USART_RXC_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
	gu8_RXC_flag = TRUE;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gu8_RXC_flag>
	
	if (USART_CBK[USART_RXC_CBK_INDEX]!=NULL)
 526:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <USART_CBK+0x4>
 52a:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <USART_CBK+0x5>
 52e:	30 97       	sbiw	r30, 0x00	; 0
 530:	09 f0       	breq	.+2      	; 0x534 <__vector_13+0x36>
	{
		USART_CBK[USART_RXC_CBK_INDEX]();
 532:	09 95       	icall
	}
	
}
 534:	ff 91       	pop	r31
 536:	ef 91       	pop	r30
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <__vector_14>:
InterruptServiceRoutine(USART_UDRE_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	2f 93       	push	r18
 562:	3f 93       	push	r19
 564:	4f 93       	push	r20
 566:	5f 93       	push	r21
 568:	6f 93       	push	r22
 56a:	7f 93       	push	r23
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
 570:	af 93       	push	r26
 572:	bf 93       	push	r27
 574:	ef 93       	push	r30
 576:	ff 93       	push	r31
	gu8_UDRE_flag = TRUE;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gu8_UDRE_flag>
	
	/*PORTA_DIR = 0xff;
	PORTA_DATA = 0xff;*/
	
	if(USART_CBK[USART_UDRE_CBK_INDEX]!=NULL)
 57e:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <USART_CBK>
 582:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <USART_CBK+0x1>
 586:	30 97       	sbiw	r30, 0x00	; 0
 588:	09 f0       	breq	.+2      	; 0x58c <__vector_14+0x36>
	{
		USART_CBK[USART_UDRE_CBK_INDEX]();
 58a:	09 95       	icall
	}
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_15>:
InterruptServiceRoutine(USART_TXC_vect)
{	gu8_TXC_flag = TRUE;
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <gu8_TXC_flag>
	
	PORTA_DIR = 0xff;
 5d6:	8f ef       	ldi	r24, 0xFF	; 255
 5d8:	8a bb       	out	0x1a, r24	; 26
	PORTA_DATA = 0xff;
 5da:	8b bb       	out	0x1b, r24	; 27
	if(USART_CBK[USART_TXC_CBK_INDEX]!=NULL)
 5dc:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <USART_CBK+0x2>
 5e0:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <USART_CBK+0x3>
 5e4:	30 97       	sbiw	r30, 0x00	; 0
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__vector_15+0x3c>
	{
		USART_CBK[USART_TXC_CBK_INDEX]();
 5e8:	09 95       	icall
	}
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
