
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026d  00800062  00800062  000006ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f01  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ace  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b2  00000000  00000000  0000321f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_11>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	1c 01       	movw	r2, r24
  56:	20 01       	movw	r4, r0
  58:	af 01       	movw	r20, r30
  5a:	24 01       	movw	r4, r8
  5c:	af 01       	movw	r20, r30
  5e:	28 01       	movw	r4, r16
  60:	2c 01       	movw	r4, r24
  62:	30 01       	movw	r6, r0
  64:	34 01       	movw	r6, r8
  66:	50 01       	movw	r10, r0
  68:	55 01       	movw	r10, r10
  6a:	b3 01       	movw	r22, r6
  6c:	5a 01       	movw	r10, r20
  6e:	b3 01       	movw	r22, r6
  70:	5f 01       	movw	r10, r30
  72:	64 01       	movw	r12, r8
  74:	69 01       	movw	r12, r18
  76:	6e 01       	movw	r12, r28
  78:	8f 01       	movw	r16, r30
  7a:	93 01       	movw	r18, r6
  7c:	97 01       	movw	r18, r14
  7e:	9b 01       	movw	r18, r22
  80:	9f 01       	movw	r18, r30
  82:	a3 01       	movw	r20, r6
  84:	a7 01       	movw	r20, r14

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf e5       	ldi	r28, 0x5F	; 95
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	10 e0       	ldi	r17, 0x00	; 0
  94:	a0 e6       	ldi	r26, 0x60	; 96
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	e8 e1       	ldi	r30, 0x18	; 24
  9a:	f6 e0       	ldi	r31, 0x06	; 6
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a2 36       	cpi	r26, 0x62	; 98
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	22 e0       	ldi	r18, 0x02	; 2
  aa:	a2 e6       	ldi	r26, 0x62	; 98
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	af 3c       	cpi	r26, 0xCF	; 207
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  bc:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <toggle_PORT_A>:

uint8_t gu8_count = 0;

void toggle_PORT_A (void)
{
	gu8_count++;
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	PORTA_DIR = OUTPUT;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	PORTA_DATA ^= HIGH;
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	80 95       	com	r24
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	08 95       	ret

000000da <toggle_PORT_B>:
}

void toggle_PORT_B (void)
{
	PORTB_DIR = OUTPUT;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	87 bb       	out	0x17, r24	; 23
	PORTB_DATA ^= HIGH;
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	80 95       	com	r24
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	08 95       	ret

000000e6 <main>:
}

int main(void)
{
	
	ENABLE_GINT;
  e6:	8f b7       	in	r24, 0x3f	; 63
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	8f bf       	out	0x3f, r24	; 63
   
	TMU_Init();
  ec:	0e 94 cb 01 	call	0x396	; 0x396 <TMU_Init>
	
	TMU_Start_Timer(TASK1_ID,toggle_PORT_A,TASK1_SPEED,PERIODIC);
  f0:	01 e0       	ldi	r16, 0x01	; 1
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	62 e6       	ldi	r22, 0x62	; 98
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TMU_Start_Timer>
	
	TMU_Start_Timer(TASK2_ID,toggle_PORT_B,TASK2_SPEED,PERIODIC);
 104:	24 e1       	ldi	r18, 0x14	; 20
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	6d e6       	ldi	r22, 0x6D	; 109
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <TMU_Start_Timer>
	
    while (1) 
    {
		TMU_Dispatch();
 116:	0e 94 86 02 	call	0x50c	; 0x50c <TMU_Dispatch>
		TCNT2 = gu8_count;
 11a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 11e:	84 bd       	out	0x24, r24	; 36
		if(gu8_count == 200){
 120:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 124:	88 3c       	cpi	r24, 0xC8	; 200
 126:	b9 f7       	brne	.-18     	; 0x116 <main+0x30>
			TMU_Stop_Timer(TASK2_ID);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <TMU_Stop_Timer>
 12e:	f3 cf       	rjmp	.-26     	; 0x116 <main+0x30>

00000130 <Timer_Init>:
		default:
			ERR = ERROR_TIMER_MODULE_ID + ERROR_INVALID_PARAMETER;
			break;
	}
	return ERR;
}
 130:	fc 01       	movw	r30, r24
 132:	89 2b       	or	r24, r25
 134:	09 f4       	brne	.+2      	; 0x138 <Timer_Init+0x8>
 136:	4e c0       	rjmp	.+156    	; 0x1d4 <Timer_Init+0xa4>
 138:	93 81       	ldd	r25, Z+3	; 0x03
 13a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <gu8_Prescaler>
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	29 f4       	brne	.+10     	; 0x14e <Timer_Init+0x1e>
 144:	99 30       	cpi	r25, 0x09	; 9
 146:	09 f4       	brne	.+2      	; 0x14a <Timer_Init+0x1a>
 148:	4f c0       	rjmp	.+158    	; 0x1e8 <Timer_Init+0xb8>
 14a:	86 e6       	ldi	r24, 0x66	; 102
 14c:	09 c0       	rjmp	.+18     	; 0x160 <Timer_Init+0x30>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	21 f4       	brne	.+8      	; 0x15a <Timer_Init+0x2a>
 152:	98 30       	cpi	r25, 0x08	; 8
 154:	21 f0       	breq	.+8      	; 0x15e <Timer_Init+0x2e>
 156:	86 e6       	ldi	r24, 0x66	; 102
 158:	03 c0       	rjmp	.+6      	; 0x160 <Timer_Init+0x30>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	01 c0       	rjmp	.+2      	; 0x160 <Timer_Init+0x30>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 81       	ld	r25, Z
 162:	91 30       	cpi	r25, 0x01	; 1
 164:	a9 f0       	breq	.+42     	; 0x190 <Timer_Init+0x60>
 166:	18 f0       	brcs	.+6      	; 0x16e <Timer_Init+0x3e>
 168:	92 30       	cpi	r25, 0x02	; 2
 16a:	19 f1       	breq	.+70     	; 0x1b2 <Timer_Init+0x82>
 16c:	35 c0       	rjmp	.+106    	; 0x1d8 <Timer_Init+0xa8>
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <gu8_Timer0InitFlag>
 174:	92 81       	ldd	r25, Z+2	; 0x02
 176:	99 23       	and	r25, r25
 178:	19 f0       	breq	.+6      	; 0x180 <Timer_Init+0x50>
 17a:	91 30       	cpi	r25, 0x01	; 1
 17c:	29 f0       	breq	.+10     	; 0x188 <Timer_Init+0x58>
 17e:	2e c0       	rjmp	.+92     	; 0x1dc <Timer_Init+0xac>
 180:	99 b7       	in	r25, 0x39	; 57
 182:	9e 7f       	andi	r25, 0xFE	; 254
 184:	99 bf       	out	0x39, r25	; 57
 186:	08 95       	ret
 188:	99 b7       	in	r25, 0x39	; 57
 18a:	91 60       	ori	r25, 0x01	; 1
 18c:	99 bf       	out	0x39, r25	; 57
 18e:	08 95       	ret
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <gu8_Timer1InitFlag>
 196:	92 81       	ldd	r25, Z+2	; 0x02
 198:	99 23       	and	r25, r25
 19a:	19 f0       	breq	.+6      	; 0x1a2 <Timer_Init+0x72>
 19c:	91 30       	cpi	r25, 0x01	; 1
 19e:	29 f0       	breq	.+10     	; 0x1aa <Timer_Init+0x7a>
 1a0:	1f c0       	rjmp	.+62     	; 0x1e0 <Timer_Init+0xb0>
 1a2:	99 b7       	in	r25, 0x39	; 57
 1a4:	9b 7f       	andi	r25, 0xFB	; 251
 1a6:	99 bf       	out	0x39, r25	; 57
 1a8:	08 95       	ret
 1aa:	99 b7       	in	r25, 0x39	; 57
 1ac:	94 60       	ori	r25, 0x04	; 4
 1ae:	99 bf       	out	0x39, r25	; 57
 1b0:	08 95       	ret
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <gu8_Timer2InitFlag>
 1b8:	92 81       	ldd	r25, Z+2	; 0x02
 1ba:	99 23       	and	r25, r25
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <Timer_Init+0x94>
 1be:	91 30       	cpi	r25, 0x01	; 1
 1c0:	29 f0       	breq	.+10     	; 0x1cc <Timer_Init+0x9c>
 1c2:	10 c0       	rjmp	.+32     	; 0x1e4 <Timer_Init+0xb4>
 1c4:	99 b7       	in	r25, 0x39	; 57
 1c6:	9f 7b       	andi	r25, 0xBF	; 191
 1c8:	99 bf       	out	0x39, r25	; 57
 1ca:	08 95       	ret
 1cc:	99 b7       	in	r25, 0x39	; 57
 1ce:	90 64       	ori	r25, 0x40	; 64
 1d0:	99 bf       	out	0x39, r25	; 57
 1d2:	08 95       	ret
 1d4:	85 e6       	ldi	r24, 0x65	; 101
 1d6:	08 95       	ret
 1d8:	86 e6       	ldi	r24, 0x66	; 102
 1da:	08 95       	ret
 1dc:	86 e6       	ldi	r24, 0x66	; 102
 1de:	08 95       	ret
 1e0:	86 e6       	ldi	r24, 0x66	; 102
 1e2:	08 95       	ret
 1e4:	86 e6       	ldi	r24, 0x66	; 102
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	ba cf       	rjmp	.-140    	; 0x160 <Timer_Init+0x30>

000001ec <Timer_Start>:
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <Timer_Start+0x6>
 1f0:	3f c0       	rjmp	.+126    	; 0x270 <Timer_Start+0x84>
 1f2:	20 f0       	brcs	.+8      	; 0x1fc <Timer_Start+0x10>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	09 f4       	brne	.+2      	; 0x1fa <Timer_Start+0xe>
 1f8:	76 c0       	rjmp	.+236    	; 0x2e6 <Timer_Start+0xfa>
 1fa:	ad c0       	rjmp	.+346    	; 0x356 <Timer_Start+0x16a>
 1fc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <gu8_Timer0InitFlag>
 200:	88 23       	and	r24, r24
 202:	09 f4       	brne	.+2      	; 0x206 <Timer_Start+0x1a>
 204:	aa c0       	rjmp	.+340    	; 0x35a <Timer_Start+0x16e>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <gu8_Timer0StartFlag>
 20c:	6f 3f       	cpi	r22, 0xFF	; 255
 20e:	71 05       	cpc	r23, r1
 210:	19 f0       	breq	.+6      	; 0x218 <Timer_Start+0x2c>
 212:	10 f0       	brcs	.+4      	; 0x218 <Timer_Start+0x2c>
 214:	86 e6       	ldi	r24, 0x66	; 102
 216:	01 c0       	rjmp	.+2      	; 0x21a <Timer_Start+0x2e>
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	62 bf       	out	0x32, r22	; 50
 21c:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <gu8_Prescaler>
 220:	4e 2f       	mov	r20, r30
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	fa 01       	movw	r30, r20
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	e9 30       	cpi	r30, 0x09	; 9
 22a:	f1 05       	cpc	r31, r1
 22c:	08 f0       	brcs	.+2      	; 0x230 <Timer_Start+0x44>
 22e:	97 c0       	rjmp	.+302    	; 0x35e <Timer_Start+0x172>
 230:	e6 5d       	subi	r30, 0xD6	; 214
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	0c 94 04 03 	jmp	0x608	; 0x608 <__tablejump2__>
 238:	93 b7       	in	r25, 0x33	; 51
 23a:	91 60       	ori	r25, 0x01	; 1
 23c:	93 bf       	out	0x33, r25	; 51
 23e:	08 95       	ret
 240:	93 b7       	in	r25, 0x33	; 51
 242:	92 60       	ori	r25, 0x02	; 2
 244:	93 bf       	out	0x33, r25	; 51
 246:	08 95       	ret
 248:	93 b7       	in	r25, 0x33	; 51
 24a:	93 60       	ori	r25, 0x03	; 3
 24c:	93 bf       	out	0x33, r25	; 51
 24e:	08 95       	ret
 250:	93 b7       	in	r25, 0x33	; 51
 252:	94 60       	ori	r25, 0x04	; 4
 254:	93 bf       	out	0x33, r25	; 51
 256:	08 95       	ret
 258:	93 b7       	in	r25, 0x33	; 51
 25a:	95 60       	ori	r25, 0x05	; 5
 25c:	93 bf       	out	0x33, r25	; 51
 25e:	08 95       	ret
 260:	93 b7       	in	r25, 0x33	; 51
 262:	96 60       	ori	r25, 0x06	; 6
 264:	93 bf       	out	0x33, r25	; 51
 266:	08 95       	ret
 268:	93 b7       	in	r25, 0x33	; 51
 26a:	97 60       	ori	r25, 0x07	; 7
 26c:	93 bf       	out	0x33, r25	; 51
 26e:	08 95       	ret
 270:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_Timer1InitFlag>
 274:	88 23       	and	r24, r24
 276:	09 f4       	brne	.+2      	; 0x27a <Timer_Start+0x8e>
 278:	74 c0       	rjmp	.+232    	; 0x362 <Timer_Start+0x176>
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gu8_Timer1StartFlag>
 280:	7d bd       	out	0x2d, r23	; 45
 282:	6c bd       	out	0x2c, r22	; 44
 284:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <gu8_Prescaler>
 288:	8e 2f       	mov	r24, r30
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	e9 30       	cpi	r30, 0x09	; 9
 292:	f1 05       	cpc	r31, r1
 294:	08 f0       	brcs	.+2      	; 0x298 <Timer_Start+0xac>
 296:	67 c0       	rjmp	.+206    	; 0x366 <Timer_Start+0x17a>
 298:	ed 5c       	subi	r30, 0xCD	; 205
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	0c 94 04 03 	jmp	0x608	; 0x608 <__tablejump2__>
 2a0:	8e b5       	in	r24, 0x2e	; 46
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	8e bd       	out	0x2e, r24	; 46
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	8e b5       	in	r24, 0x2e	; 46
 2ac:	82 60       	ori	r24, 0x02	; 2
 2ae:	8e bd       	out	0x2e, r24	; 46
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
 2b4:	8e b5       	in	r24, 0x2e	; 46
 2b6:	83 60       	ori	r24, 0x03	; 3
 2b8:	8e bd       	out	0x2e, r24	; 46
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
 2be:	8e b5       	in	r24, 0x2e	; 46
 2c0:	84 60       	ori	r24, 0x04	; 4
 2c2:	8e bd       	out	0x2e, r24	; 46
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	8e b5       	in	r24, 0x2e	; 46
 2ca:	85 60       	ori	r24, 0x05	; 5
 2cc:	8e bd       	out	0x2e, r24	; 46
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
 2d2:	8e b5       	in	r24, 0x2e	; 46
 2d4:	86 60       	ori	r24, 0x06	; 6
 2d6:	8e bd       	out	0x2e, r24	; 46
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret
 2dc:	8e b5       	in	r24, 0x2e	; 46
 2de:	87 60       	ori	r24, 0x07	; 7
 2e0:	8e bd       	out	0x2e, r24	; 46
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gu8_Timer2InitFlag>
 2ea:	88 23       	and	r24, r24
 2ec:	f1 f1       	breq	.+124    	; 0x36a <Timer_Start+0x17e>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <gu8_Timer2StartFlag>
 2f4:	6f 3f       	cpi	r22, 0xFF	; 255
 2f6:	71 05       	cpc	r23, r1
 2f8:	19 f0       	breq	.+6      	; 0x300 <Timer_Start+0x114>
 2fa:	10 f0       	brcs	.+4      	; 0x300 <Timer_Start+0x114>
 2fc:	86 e6       	ldi	r24, 0x66	; 102
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <Timer_Start+0x116>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	64 bd       	out	0x24, r22	; 36
 304:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <gu8_Prescaler>
 308:	4e 2f       	mov	r20, r30
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	fa 01       	movw	r30, r20
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	e7 30       	cpi	r30, 0x07	; 7
 312:	f1 05       	cpc	r31, r1
 314:	60 f5       	brcc	.+88     	; 0x36e <Timer_Start+0x182>
 316:	e4 5c       	subi	r30, 0xC4	; 196
 318:	ff 4f       	sbci	r31, 0xFF	; 255
 31a:	0c 94 04 03 	jmp	0x608	; 0x608 <__tablejump2__>
 31e:	95 b5       	in	r25, 0x25	; 37
 320:	91 60       	ori	r25, 0x01	; 1
 322:	95 bd       	out	0x25, r25	; 37
 324:	08 95       	ret
 326:	95 b5       	in	r25, 0x25	; 37
 328:	92 60       	ori	r25, 0x02	; 2
 32a:	95 bd       	out	0x25, r25	; 37
 32c:	08 95       	ret
 32e:	95 b5       	in	r25, 0x25	; 37
 330:	93 60       	ori	r25, 0x03	; 3
 332:	95 bd       	out	0x25, r25	; 37
 334:	08 95       	ret
 336:	95 b5       	in	r25, 0x25	; 37
 338:	94 60       	ori	r25, 0x04	; 4
 33a:	95 bd       	out	0x25, r25	; 37
 33c:	08 95       	ret
 33e:	95 b5       	in	r25, 0x25	; 37
 340:	95 60       	ori	r25, 0x05	; 5
 342:	95 bd       	out	0x25, r25	; 37
 344:	08 95       	ret
 346:	95 b5       	in	r25, 0x25	; 37
 348:	96 60       	ori	r25, 0x06	; 6
 34a:	95 bd       	out	0x25, r25	; 37
 34c:	08 95       	ret
 34e:	95 b5       	in	r25, 0x25	; 37
 350:	97 60       	ori	r25, 0x07	; 7
 352:	95 bd       	out	0x25, r25	; 37
 354:	08 95       	ret
 356:	86 e6       	ldi	r24, 0x66	; 102
 358:	08 95       	ret
 35a:	87 e6       	ldi	r24, 0x67	; 103
 35c:	08 95       	ret
 35e:	86 e6       	ldi	r24, 0x66	; 102
 360:	08 95       	ret
 362:	87 e6       	ldi	r24, 0x67	; 103
 364:	08 95       	ret
 366:	86 e6       	ldi	r24, 0x66	; 102
 368:	08 95       	ret
 36a:	87 e6       	ldi	r24, 0x67	; 103
 36c:	08 95       	ret
 36e:	86 e6       	ldi	r24, 0x66	; 102
 370:	08 95       	ret

00000372 <Timer_SetValue>:
 * @return function status 
 */
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data)
{
	ERROR_STATUS  ERR = E_OK;
	switch(Timer_CH_NO)
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	39 f0       	breq	.+14     	; 0x384 <Timer_SetValue+0x12>
 376:	18 f0       	brcs	.+6      	; 0x37e <Timer_SetValue+0xc>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	41 f0       	breq	.+16     	; 0x38c <Timer_SetValue+0x1a>
 37c:	0a c0       	rjmp	.+20     	; 0x392 <Timer_SetValue+0x20>
	{
		case TIMER_CH0:
			TCNT0 = Data;
 37e:	62 bf       	out	0x32, r22	; 50
 * @param Data : TCNT Value
 * @return function status 
 */
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data)
{
	ERROR_STATUS  ERR = E_OK;
 380:	80 e0       	ldi	r24, 0x00	; 0
	switch(Timer_CH_NO)
	{
		case TIMER_CH0:
			TCNT0 = Data;
			break;
 382:	08 95       	ret
		case TIMER_CH1:
			TCNT1 = Data;
 384:	7d bd       	out	0x2d, r23	; 45
 386:	6c bd       	out	0x2c, r22	; 44
 * @param Data : TCNT Value
 * @return function status 
 */
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data)
{
	ERROR_STATUS  ERR = E_OK;
 388:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH0:
			TCNT0 = Data;
			break;
		case TIMER_CH1:
			TCNT1 = Data;
			break;
 38a:	08 95       	ret
		case TIMER_CH2:
			TCNT2 = Data;
 38c:	64 bd       	out	0x24, r22	; 36
 * @param Data : TCNT Value
 * @return function status 
 */
ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data)
{
	ERROR_STATUS  ERR = E_OK;
 38e:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH1:
			TCNT1 = Data;
			break;
		case TIMER_CH2:
			TCNT2 = Data;
			break;
 390:	08 95       	ret
		default:
	ERR = ERROR_TIMER_MODULE_ID + ERROR_INVALID_PARAMETER;
 392:	86 e6       	ldi	r24, 0x66	; 102
			break;
	}
	return ERR;
}
 394:	08 95       	ret

00000396 <TMU_Init>:
	else 
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_MODULE_NOT_INITIALIZED;
	}
	return ERR ;
}
 396:	cf 93       	push	r28
 398:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <TMU_Config>
 39c:	98 2f       	mov	r25, r24
 39e:	9d 7f       	andi	r25, 0xFD	; 253
 3a0:	91 f4       	brne	.+36     	; 0x3c6 <TMU_Init+0x30>
 3a2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gu8_TMU_InitFlag>
 3a6:	91 11       	cpse	r25, r1
 3a8:	10 c0       	rjmp	.+32     	; 0x3ca <TMU_Init+0x34>
 3aa:	e9 ec       	ldi	r30, 0xC9	; 201
 3ac:	f2 e0       	ldi	r31, 0x02	; 2
 3ae:	80 83       	st	Z, r24
 3b0:	11 82       	std	Z+1, r1	; 0x01
 3b2:	c1 e0       	ldi	r28, 0x01	; 1
 3b4:	c2 83       	std	Z+2, r28	; 0x02
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	83 83       	std	Z+3, r24	; 0x03
 3ba:	cf 01       	movw	r24, r30
 3bc:	0e 94 98 00 	call	0x130	; 0x130 <Timer_Init>
 3c0:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <gu8_TMU_InitFlag>
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <TMU_Init+0x36>
 3c6:	8a ec       	ldi	r24, 0xCA	; 202
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <TMU_Init+0x36>
 3ca:	8c ec       	ldi	r24, 0xCC	; 204
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <TMU_Start_Timer>:
* @param: CBK_TOV : pointer to function (consumer)
* @param: delay_ms: period of the consumer
* @return function status
*/
ERROR_STATUS TMU_Start_Timer (uint8_t Task_ID , void (*CBK_TOV)(void) , uint32_t delay_ms , uint8_t periodic_or_oneShot)
{
 3d0:	8f 92       	push	r8
 3d2:	9f 92       	push	r9
 3d4:	af 92       	push	r10
 3d6:	bf 92       	push	r11
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	0f 93       	push	r16
 3de:	cf 93       	push	r28
	ERROR_STATUS ERR = E_OK;
	
	static uint8_t u8_FirstCallFlag = TRUE;
	
	if (gu8_TMU_InitFlag)
 3e0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gu8_TMU_InitFlag>
 3e4:	99 23       	and	r25, r25
 3e6:	09 f4       	brne	.+2      	; 0x3ea <TMU_Start_Timer+0x1a>
 3e8:	6d c0       	rjmp	.+218    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	{
		if (CBK_TOV !=NULL)
 3ea:	61 15       	cp	r22, r1
 3ec:	71 05       	cpc	r23, r1
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <TMU_Start_Timer+0x22>
 3f0:	6b c0       	rjmp	.+214    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3f2:	49 01       	movw	r8, r18
 3f4:	5a 01       	movw	r10, r20
 3f6:	7b 01       	movw	r14, r22
 3f8:	c8 2f       	mov	r28, r24
		{
			if (u8_FirstCallFlag)
 3fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3fe:	88 23       	and	r24, r24
 400:	49 f0       	breq	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			{
				ERR = Timer_Start(Timer_Config.Timer_CH_NO,TIMER_INITIAL_VALUE);
 402:	65 e0       	ldi	r22, 0x05	; 5
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <Timer_Config>
 40a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Timer_Start>
				u8_FirstCallFlag = FALSE;
 40e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 412:	01 c0       	rjmp	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
* @param: delay_ms: period of the consumer
* @return function status
*/
ERROR_STATUS TMU_Start_Timer (uint8_t Task_ID , void (*CBK_TOV)(void) , uint32_t delay_ms , uint8_t periodic_or_oneShot)
{
	ERROR_STATUS ERR = E_OK;
 414:	80 e0       	ldi	r24, 0x00	; 0
			{
				ERR = Timer_Start(Timer_Config.Timer_CH_NO,TIMER_INITIAL_VALUE);
				u8_FirstCallFlag = FALSE;
			}
			
			if (u32_Buff_index < BUFFER_SIZE)
 416:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <u32_Buff_index>
 41a:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <u32_Buff_index+0x1>
 41e:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <u32_Buff_index+0x2>
 422:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <u32_Buff_index+0x3>
 426:	42 33       	cpi	r20, 0x32	; 50
 428:	51 05       	cpc	r21, r1
 42a:	61 05       	cpc	r22, r1
 42c:	71 05       	cpc	r23, r1
 42e:	08 f0       	brcs	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	4d c0       	rjmp	.+154    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			{
				TaskBuffer[u32_Buff_index].Task_ID = Task_ID;
 432:	9a 01       	movw	r18, r20
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	f9 01       	movw	r30, r18
 43a:	e4 0f       	add	r30, r20
 43c:	f5 1f       	adc	r31, r21
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e0 59       	subi	r30, 0x90	; 144
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	c0 83       	st	Z, r28
				
				TaskBuffer[u32_Buff_index].delay_ms = delay_ms;
 44c:	f9 01       	movw	r30, r18
 44e:	e4 0f       	add	r30, r20
 450:	f5 1f       	adc	r31, r21
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	e0 59       	subi	r30, 0x90	; 144
 45c:	ff 4f       	sbci	r31, 0xFF	; 255
 45e:	82 82       	std	Z+2, r8	; 0x02
 460:	93 82       	std	Z+3, r9	; 0x03
 462:	a4 82       	std	Z+4, r10	; 0x04
 464:	b5 82       	std	Z+5, r11	; 0x05
				
				TaskBuffer[u32_Buff_index].CBK_TOV = CBK_TOV;
 466:	f9 01       	movw	r30, r18
 468:	e4 0f       	add	r30, r20
 46a:	f5 1f       	adc	r31, r21
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	e0 59       	subi	r30, 0x90	; 144
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	f3 86       	std	Z+11, r15	; 0x0b
 47a:	e2 86       	std	Z+10, r14	; 0x0a
				
				TaskBuffer[u32_Buff_index].current_ticks = INITIAL_VALUE;
 47c:	f9 01       	movw	r30, r18
 47e:	e4 0f       	add	r30, r20
 480:	f5 1f       	adc	r31, r21
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	e0 59       	subi	r30, 0x90	; 144
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	16 82       	std	Z+6, r1	; 0x06
 490:	17 82       	std	Z+7, r1	; 0x07
 492:	10 86       	std	Z+8, r1	; 0x08
 494:	11 86       	std	Z+9, r1	; 0x09

				TaskBuffer[u32_Buff_index].periodic_or_oneShot = periodic_or_oneShot;
 496:	f9 01       	movw	r30, r18
 498:	e4 0f       	add	r30, r20
 49a:	f5 1f       	adc	r31, r21
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	e0 59       	subi	r30, 0x90	; 144
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	01 83       	std	Z+1, r16	; 0x01
				
				u32_Buff_index++;
 4aa:	4f 5f       	subi	r20, 0xFF	; 255
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255
 4ae:	6f 4f       	sbci	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <u32_Buff_index>
 4b6:	50 93 6b 00 	sts	0x006B, r21	; 0x80006b <u32_Buff_index+0x1>
 4ba:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <u32_Buff_index+0x2>
 4be:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <u32_Buff_index+0x3>
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		
	}
	
	else
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_MODULE_NOT_INITIALIZED;
 4c4:	8b ec       	ldi	r24, 0xCB	; 203
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				ERR = ERROR_TMU_MODULE_ID + ERROR_FULL_BUFFER;
			}
		}
		else 
		{
			ERR = ERROR_TMU_MODULE_ID + ERROR_NULL_POINTER;
 4c8:	89 ec       	ldi	r24, 0xC9	; 201
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				u32_Buff_index++;
				
			}
			else
			{
				ERR = ERROR_TMU_MODULE_ID + ERROR_FULL_BUFFER;
 4cc:	8f ec       	ldi	r24, 0xCF	; 207
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_MODULE_NOT_INITIALIZED;
	}
	
	return ERR ;
}
 4ce:	cf 91       	pop	r28
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	bf 90       	pop	r11
 4d8:	af 90       	pop	r10
 4da:	9f 90       	pop	r9
 4dc:	8f 90       	pop	r8
 4de:	08 95       	ret

000004e0 <TMU_Stop_Timer>:
 * Description: stops a specific task from the task buffer
 * @param: Task_ID : ID of the Consumer
 * @return function status 
 */
ERROR_STATUS TMU_Stop_Timer(uint8_t Task_ID)
{
 4e0:	e0 e7       	ldi	r30, 0x70	; 112
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	28 ec       	ldi	r18, 0xC8	; 200
 4e6:	32 e0       	ldi	r19, 0x02	; 2
	ERROR_STATUS ERR = E_OK;
	uint32_t u32_Counter;
	uint8_t u8_IDFoundFlag = FALSE;
 4e8:	40 e0       	ldi	r20, 0x00	; 0
	for(u32_Counter=STARTING_INDEX; u32_Counter<BUFFER_SIZE; u32_Counter++)
	{
		if (TaskBuffer[u32_Counter].Task_ID == Task_ID)
		{				
			TaskBuffer[u32_Counter].CBK_TOV = NULL;
			u8_IDFoundFlag = TRUE;
 4ea:	51 e0       	ldi	r21, 0x01	; 1
	uint32_t u32_Counter;
	uint8_t u8_IDFoundFlag = FALSE;
	
	for(u32_Counter=STARTING_INDEX; u32_Counter<BUFFER_SIZE; u32_Counter++)
	{
		if (TaskBuffer[u32_Counter].Task_ID == Task_ID)
 4ec:	90 81       	ld	r25, Z
 4ee:	98 13       	cpse	r25, r24
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <TMU_Stop_Timer+0x18>
		{				
			TaskBuffer[u32_Counter].CBK_TOV = NULL;
 4f2:	13 86       	std	Z+11, r1	; 0x0b
 4f4:	12 86       	std	Z+10, r1	; 0x0a
			u8_IDFoundFlag = TRUE;
 4f6:	45 2f       	mov	r20, r21
 4f8:	3c 96       	adiw	r30, 0x0c	; 12
{
	ERROR_STATUS ERR = E_OK;
	uint32_t u32_Counter;
	uint8_t u8_IDFoundFlag = FALSE;
	
	for(u32_Counter=STARTING_INDEX; u32_Counter<BUFFER_SIZE; u32_Counter++)
 4fa:	e2 17       	cp	r30, r18
 4fc:	f3 07       	cpc	r31, r19
 4fe:	b1 f7       	brne	.-20     	; 0x4ec <TMU_Stop_Timer+0xc>
		{				
			TaskBuffer[u32_Counter].CBK_TOV = NULL;
			u8_IDFoundFlag = TRUE;
		}
	}
	if (!u8_IDFoundFlag)
 500:	41 11       	cpse	r20, r1
 502:	02 c0       	rjmp	.+4      	; 0x508 <TMU_Stop_Timer+0x28>
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_INVALID_PARAMETER;
 504:	8a ec       	ldi	r24, 0xCA	; 202
 506:	08 95       	ret
 * @param: Task_ID : ID of the Consumer
 * @return function status 
 */
ERROR_STATUS TMU_Stop_Timer(uint8_t Task_ID)
{
	ERROR_STATUS ERR = E_OK;
 508:	80 e0       	ldi	r24, 0x00	; 0
	if (!u8_IDFoundFlag)
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_INVALID_PARAMETER;
	}
	return ERR ;
}
 50a:	08 95       	ret

0000050c <TMU_Dispatch>:
/**
 * Description: starts implementing the tasks based on their periods
 * @return function status 
 */
ERROR_STATUS TMU_Dispatch(void)
{
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
	ERROR_STATUS ERR = E_OK;
	uint32_t u32_Counter;
	
	if (gu8_TMU_InitFlag)
 518:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8_TMU_InitFlag>
 51c:	88 23       	and	r24, r24
 51e:	09 f4       	brne	.+2      	; 0x522 <TMU_Dispatch+0x16>
 520:	3f c0       	rjmp	.+126    	; 0x5a0 <TMU_Dispatch+0x94>
	{
		if (ISR_Fire)
 522:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ISR_Fire>
 526:	88 23       	and	r24, r24
 528:	e9 f1       	breq	.+122    	; 0x5a4 <TMU_Dispatch+0x98>
		{
			ISR_Fire = FALSE;
 52a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ISR_Fire>
 52e:	c1 e7       	ldi	r28, 0x71	; 113
 530:	d0 e0       	ldi	r29, 0x00	; 0
 532:	0f 2e       	mov	r0, r31
 534:	f9 ec       	ldi	r31, 0xC9	; 201
 536:	ef 2e       	mov	r14, r31
 538:	f2 e0       	ldi	r31, 0x02	; 2
 53a:	ff 2e       	mov	r15, r31
 53c:	f0 2d       	mov	r31, r0
			
			for (u32_Counter=STARTING_INDEX; u32_Counter<BUFFER_SIZE ; u32_Counter++)
			{
				TaskBuffer[u32_Counter].current_ticks++;
 53e:	8d 81       	ldd	r24, Y+5	; 0x05
 540:	9e 81       	ldd	r25, Y+6	; 0x06
 542:	af 81       	ldd	r26, Y+7	; 0x07
 544:	b8 85       	ldd	r27, Y+8	; 0x08
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	a1 1d       	adc	r26, r1
 54a:	b1 1d       	adc	r27, r1
 54c:	8d 83       	std	Y+5, r24	; 0x05
 54e:	9e 83       	std	Y+6, r25	; 0x06
 550:	af 83       	std	Y+7, r26	; 0x07
 552:	b8 87       	std	Y+8, r27	; 0x08
				if(TaskBuffer[u32_Counter].CBK_TOV!=NULL  &&  (TaskBuffer[u32_Counter].current_ticks == TaskBuffer[u32_Counter].delay_ms))
 554:	e9 85       	ldd	r30, Y+9	; 0x09
 556:	fa 85       	ldd	r31, Y+10	; 0x0a
 558:	30 97       	sbiw	r30, 0x00	; 0
 55a:	e1 f0       	breq	.+56     	; 0x594 <TMU_Dispatch+0x88>
 55c:	49 81       	ldd	r20, Y+1	; 0x01
 55e:	5a 81       	ldd	r21, Y+2	; 0x02
 560:	6b 81       	ldd	r22, Y+3	; 0x03
 562:	7c 81       	ldd	r23, Y+4	; 0x04
 564:	84 17       	cp	r24, r20
 566:	95 07       	cpc	r25, r21
 568:	a6 07       	cpc	r26, r22
 56a:	b7 07       	cpc	r27, r23
 56c:	99 f4       	brne	.+38     	; 0x594 <TMU_Dispatch+0x88>
				{

					if(TaskBuffer[u32_Counter].periodic_or_oneShot == PERIODIC){
 56e:	88 81       	ld	r24, Y
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	31 f4       	brne	.+12     	; 0x580 <TMU_Dispatch+0x74>
						TaskBuffer[u32_Counter].CBK_TOV();
 574:	09 95       	icall
						TaskBuffer[u32_Counter].current_ticks = INITIAL_VALUE;			
 576:	1d 82       	std	Y+5, r1	; 0x05
 578:	1e 82       	std	Y+6, r1	; 0x06
 57a:	1f 82       	std	Y+7, r1	; 0x07
 57c:	18 86       	std	Y+8, r1	; 0x08
 57e:	0a c0       	rjmp	.+20     	; 0x594 <TMU_Dispatch+0x88>
					}else if(TaskBuffer[u32_Counter].periodic_or_oneShot == ONE_SHOT){
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	41 f4       	brne	.+16     	; 0x594 <TMU_Dispatch+0x88>
						TaskBuffer[u32_Counter].CBK_TOV();
 584:	09 95       	icall
						TaskBuffer[u32_Counter].current_ticks = INITIAL_VALUE;
 586:	1d 82       	std	Y+5, r1	; 0x05
 588:	1e 82       	std	Y+6, r1	; 0x06
 58a:	1f 82       	std	Y+7, r1	; 0x07
 58c:	18 86       	std	Y+8, r1	; 0x08
						TaskBuffer[u32_Counter].periodic_or_oneShot = INITIAL_VALUE;
 58e:	18 82       	st	Y, r1
						TaskBuffer[u32_Counter].CBK_TOV = NULL;
 590:	1a 86       	std	Y+10, r1	; 0x0a
 592:	19 86       	std	Y+9, r1	; 0x09
 594:	2c 96       	adiw	r28, 0x0c	; 12
	{
		if (ISR_Fire)
		{
			ISR_Fire = FALSE;
			
			for (u32_Counter=STARTING_INDEX; u32_Counter<BUFFER_SIZE ; u32_Counter++)
 596:	ce 15       	cp	r28, r14
 598:	df 05       	cpc	r29, r15
 59a:	89 f6       	brne	.-94     	; 0x53e <TMU_Dispatch+0x32>
 * Description: starts implementing the tasks based on their periods
 * @return function status 
 */
ERROR_STATUS TMU_Dispatch(void)
{
	ERROR_STATUS ERR = E_OK;
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <TMU_Dispatch+0x9a>
			}
		}
	}
	else
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_MODULE_NOT_INITIALIZED;
 5a0:	8b ec       	ldi	r24, 0xCB	; 203
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <TMU_Dispatch+0x9a>
 * Description: starts implementing the tasks based on their periods
 * @return function status 
 */
ERROR_STATUS TMU_Dispatch(void)
{
	ERROR_STATUS ERR = E_OK;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
	{
		ERR = ERROR_TMU_MODULE_ID + ERROR_MODULE_NOT_INITIALIZED;
	}
	
	return ERR;
}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	08 95       	ret

000005b4 <__vector_11>:

/************************************************************************/
/*					  TIMERS INTERRUPT SERVICE ROUTINES 						   */
/************************************************************************/
InterruptServiceRoutine(TIMER_OVF_VECT)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
	
	ISR_Fire = TRUE;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ISR_Fire>
	Timer_SetValue(TIMER_CHANNEL,TIMER_INITIAL_VALUE);
 5dc:	65 e0       	ldi	r22, 0x05	; 5
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 b9 01 	call	0x372	; 0x372 <Timer_SetValue>
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__tablejump2__>:
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	05 90       	lpm	r0, Z+
 60e:	f4 91       	lpm	r31, Z
 610:	e0 2d       	mov	r30, r0
 612:	09 94       	ijmp

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
