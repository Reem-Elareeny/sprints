
Week2_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000464  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000004d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a3f  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  000020fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c30  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  000036ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa0  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bad  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006285  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_4>
  14:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_10>
  2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  74:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
	}
	return PORT_VALUE;
}

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction){
   if(u8_direction == OUTPUT){
  7c:	4f 3f       	cpi	r20, 0xFF	; 255
  7e:	c1 f4       	brne	.+48     	; 0xb0 <gpioPinDirection+0x34>
	   switch(u8_port){
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	51 f0       	breq	.+20     	; 0x98 <gpioPinDirection+0x1c>
  84:	28 f0       	brcs	.+10     	; 0x90 <gpioPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	59 f0       	breq	.+22     	; 0xa0 <gpioPinDirection+0x24>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	69 f0       	breq	.+26     	; 0xa8 <gpioPinDirection+0x2c>
  8e:	08 95       	ret
			case GPIOA:
				PORTA_DIR |= u8_pins;
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	68 2b       	or	r22, r24
  94:	6a bb       	out	0x1a, r22	; 26
				break;
  96:	08 95       	ret
			case GPIOB:
				PORTB_DIR |= u8_pins;
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	68 2b       	or	r22, r24
  9c:	67 bb       	out	0x17, r22	; 23
				break;
  9e:	08 95       	ret
			case GPIOC:
				PORTC_DIR |= u8_pins;
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	68 2b       	or	r22, r24
  a4:	64 bb       	out	0x14, r22	; 20
				break;
  a6:	08 95       	ret
			case GPIOD:
				PORTD_DIR |= u8_pins;
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	68 2b       	or	r22, r24
  ac:	61 bb       	out	0x11, r22	; 17
				break;
  ae:	08 95       	ret
			default:
			break;
		}
   }else if(u8_direction == INPUT){
  b0:	41 11       	cpse	r20, r1
  b2:	1b c0       	rjmp	.+54     	; 0xea <gpioPinDirection+0x6e>
	   switch(u8_port){
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	59 f0       	breq	.+22     	; 0xce <gpioPinDirection+0x52>
  b8:	28 f0       	brcs	.+10     	; 0xc4 <gpioPinDirection+0x48>
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	69 f0       	breq	.+26     	; 0xd8 <gpioPinDirection+0x5c>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	81 f0       	breq	.+32     	; 0xe2 <gpioPinDirection+0x66>
  c2:	08 95       	ret
		case GPIOA:
			PORTA_DIR &= ~(u8_pins);
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	60 95       	com	r22
  c8:	68 23       	and	r22, r24
  ca:	6a bb       	out	0x1a, r22	; 26
			break;
  cc:	08 95       	ret
		case GPIOB:
			PORTB_DIR &= ~(u8_pins);
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	60 95       	com	r22
  d2:	68 23       	and	r22, r24
  d4:	67 bb       	out	0x17, r22	; 23
			break;
  d6:	08 95       	ret
		case GPIOC:
			PORTC_DIR &= ~(u8_pins);
  d8:	84 b3       	in	r24, 0x14	; 20
  da:	60 95       	com	r22
  dc:	68 23       	and	r22, r24
  de:	64 bb       	out	0x14, r22	; 20
			break;
  e0:	08 95       	ret
		case GPIOD:
			PORTD_DIR &= ~(u8_pins);
  e2:	81 b3       	in	r24, 0x11	; 17
  e4:	60 95       	com	r22
  e6:	68 23       	and	r22, r24
  e8:	61 bb       	out	0x11, r22	; 17
  ea:	08 95       	ret

000000ec <gpioPinWrite>:
		break;   
		}
	}
}
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value){
   if(u8_value == OUTPUT){
  ec:	4f 3f       	cpi	r20, 0xFF	; 255
  ee:	c1 f4       	brne	.+48     	; 0x120 <gpioPinWrite+0x34>
		switch(u8_port){
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	51 f0       	breq	.+20     	; 0x108 <gpioPinWrite+0x1c>
  f4:	28 f0       	brcs	.+10     	; 0x100 <gpioPinWrite+0x14>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	59 f0       	breq	.+22     	; 0x110 <gpioPinWrite+0x24>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	69 f0       	breq	.+26     	; 0x118 <gpioPinWrite+0x2c>
  fe:	08 95       	ret
			case GPIOA:
				PORTA_DATA |= u8_pins;
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	68 2b       	or	r22, r24
 104:	6b bb       	out	0x1b, r22	; 27
				break;
 106:	08 95       	ret
			case GPIOB:
				PORTB_DATA |= u8_pins;
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	68 2b       	or	r22, r24
 10c:	68 bb       	out	0x18, r22	; 24
				break;
 10e:	08 95       	ret
			case GPIOC:
				PORTC_DATA |= u8_pins;
 110:	85 b3       	in	r24, 0x15	; 21
 112:	68 2b       	or	r22, r24
 114:	65 bb       	out	0x15, r22	; 21
				break;
 116:	08 95       	ret
			case GPIOD:
				PORTD_DATA |= u8_pins;
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	68 2b       	or	r22, r24
 11c:	62 bb       	out	0x12, r22	; 18
				break;
 11e:	08 95       	ret
			default:
			break;
		}
	}else if(u8_value == INPUT){
 120:	41 11       	cpse	r20, r1
 122:	1b c0       	rjmp	.+54     	; 0x15a <gpioPinWrite+0x6e>
		switch(u8_port){
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	59 f0       	breq	.+22     	; 0x13e <gpioPinWrite+0x52>
 128:	28 f0       	brcs	.+10     	; 0x134 <gpioPinWrite+0x48>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	69 f0       	breq	.+26     	; 0x148 <gpioPinWrite+0x5c>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	81 f0       	breq	.+32     	; 0x152 <gpioPinWrite+0x66>
 132:	08 95       	ret
		case GPIOA:
			PORTA_DATA &= ~(u8_pins);
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	60 95       	com	r22
 138:	68 23       	and	r22, r24
 13a:	6b bb       	out	0x1b, r22	; 27
			break;
 13c:	08 95       	ret
		case GPIOB:
			PORTB_DATA &= ~(u8_pins);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	60 95       	com	r22
 142:	68 23       	and	r22, r24
 144:	68 bb       	out	0x18, r22	; 24
			break;
 146:	08 95       	ret
		case GPIOC:
			PORTC_DATA &= ~(u8_pins);
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	60 95       	com	r22
 14c:	68 23       	and	r22, r24
 14e:	65 bb       	out	0x15, r22	; 21
			break;
 150:	08 95       	ret
		case GPIOD:
			PORTD_DATA &= ~(u8_pins);
 152:	82 b3       	in	r24, 0x12	; 18
 154:	60 95       	com	r22
 156:	68 23       	and	r22, r24
 158:	62 bb       	out	0x12, r22	; 18
 15a:	08 95       	ret

0000015c <Led_Init>:
#include "led.h"

void Led_Init(En_LedNumber_t en_led_id){
	switch(en_led_id){
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	61 f0       	breq	.+24     	; 0x178 <Led_Init+0x1c>
 160:	28 f0       	brcs	.+10     	; 0x16c <Led_Init+0x10>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	79 f0       	breq	.+30     	; 0x184 <Led_Init+0x28>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	99 f0       	breq	.+38     	; 0x190 <Led_Init+0x34>
 16a:	08 95       	ret
		case LED_0:
			gpioPinDirection(LED_0_GPIO,LED_0_BIT, OUTPUT);
 16c:	4f ef       	ldi	r20, 0xFF	; 255
 16e:	60 e1       	ldi	r22, 0x10	; 16
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 176:	08 95       	ret
		case LED_1:
			gpioPinDirection(LED_1_GPIO,LED_1_BIT,OUTPUT);
 178:	4f ef       	ldi	r20, 0xFF	; 255
 17a:	60 e2       	ldi	r22, 0x20	; 32
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 182:	08 95       	ret
		case LED_2:
			gpioPinDirection(LED_2_GPIO,LED_2_BIT,OUTPUT);
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	60 e4       	ldi	r22, 0x40	; 64
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
			break;
 18e:	08 95       	ret
		case LED_3:
			gpioPinDirection(LED_3_GPIO,LED_3_BIT,OUTPUT);
 190:	4f ef       	ldi	r20, 0xFF	; 255
 192:	60 e8       	ldi	r22, 0x80	; 128
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 19a:	08 95       	ret

0000019c <main>:
void push_button_with_timer_interrupts();

int main(void)
{
    /* Replace with your application code */
	Led_Init(LED_0);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 ae 00 	call	0x15c	; 0x15c <Led_Init>
//  	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_8,0x00,0x00,T0_POLLING);
	timer0SwPWM(0,2);
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 a5 01 	call	0x34a	; 0x34a <timer0SwPWM>
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0xe>

000001ac <__vector_11>:
	}
	else{// interrupt enabled
			sei();
			timer0Start();
	}
}
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1dc:	82 bf       	out	0x32, r24	; 50
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_10>:
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_5>:
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	4f ef       	ldi	r20, 0xFF	; 255
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 27a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27e:	82 bf       	out	0x32, r24	; 50
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_4>:
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <timer0Init>:
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	d8 2f       	mov	r29, r24
 2fe:	c6 2f       	mov	r28, r22
 300:	14 2f       	mov	r17, r20
 302:	f2 2e       	mov	r15, r18
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 ae 00 	call	0x15c	; 0x15c <Led_Init>
 30a:	12 be       	out	0x32, r1	; 50
 30c:	13 be       	out	0x33, r1	; 51
 30e:	1c be       	out	0x3c, r1	; 60
 310:	83 b7       	in	r24, 0x33	; 51
 312:	d8 2b       	or	r29, r24
 314:	d3 bf       	out	0x33, r29	; 51
 316:	83 b7       	in	r24, 0x33	; 51
 318:	c8 2b       	or	r28, r24
 31a:	c3 bf       	out	0x33, r28	; 51
 31c:	89 b7       	in	r24, 0x39	; 57
 31e:	8c 7f       	andi	r24, 0xFC	; 252
 320:	89 bf       	out	0x39, r24	; 57
 322:	89 b7       	in	r24, 0x39	; 57
 324:	e8 2a       	or	r14, r24
 326:	e9 be       	out	0x39, r14	; 57
 328:	f2 be       	out	0x32, r15	; 50
 32a:	0c bf       	out	0x3c, r16	; 60
 32c:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <T0_prescaler>
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	08 95       	ret

0000033e <timer0Start>:
 33e:	93 b7       	in	r25, 0x33	; 51
 340:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <T0_prescaler>
 344:	89 2b       	or	r24, r25
 346:	83 bf       	out	0x33, r24	; 51
 348:	08 95       	ret

0000034a <timer0SwPWM>:
// 	}
// 	
// }
// 
// 
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency){
 34a:	ef 92       	push	r14
 34c:	0f 93       	push	r16
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	c8 2f       	mov	r28, r24
 354:	d6 2f       	mov	r29, r22
	uint8_t CTC_value = 0;
	uint8_t interrupt_mask = 0;
	//freq/(prescaler * 1+256)
	if(u8_dutyCycle == 100){
 356:	84 36       	cpi	r24, 0x64	; 100
 358:	39 f0       	breq	.+14     	; 0x368 <timer0SwPWM+0x1e>
		CTC_value = 0;
		interrupt_mask = (T0_INTERRUPT_NORMAL);
	}else if(u8_dutyCycle == 0){
 35a:	88 23       	and	r24, r24
 35c:	41 f0       	breq	.+16     	; 0x36e <timer0SwPWM+0x24>
			interrupt_mask = (T0_COMP_MODE);
	}else{
		CTC_value =(uint8_t)(256 * u8_dutyCycle / 100);
		interrupt_mask = (T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP);
 35e:	0f 2e       	mov	r0, r31
 360:	f3 e0       	ldi	r31, 0x03	; 3
 362:	ef 2e       	mov	r14, r31
 364:	f0 2d       	mov	r31, r0
 366:	06 c0       	rjmp	.+12     	; 0x374 <timer0SwPWM+0x2a>
	uint8_t CTC_value = 0;
	uint8_t interrupt_mask = 0;
	//freq/(prescaler * 1+256)
	if(u8_dutyCycle == 100){
		CTC_value = 0;
		interrupt_mask = (T0_INTERRUPT_NORMAL);
 368:	ee 24       	eor	r14, r14
 36a:	e3 94       	inc	r14
 36c:	03 c0       	rjmp	.+6      	; 0x374 <timer0SwPWM+0x2a>
	}else if(u8_dutyCycle == 0){
			interrupt_mask = (T0_COMP_MODE);
 36e:	68 94       	set
 370:	ee 24       	eor	r14, r14
 372:	e3 f8       	bld	r14, 3
	}else{
		CTC_value =(uint8_t)(256 * u8_dutyCycle / 100);
		interrupt_mask = (T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP);
	}
	//interrupt_mask = (T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP);
	sei();
 374:	8f b7       	in	r24, 0x3f	; 63
 376:	80 68       	ori	r24, 0x80	; 128
 378:	8f bf       	out	0x3f, r24	; 63
	gpioPinDirection(T0_PWM_GPIO,T0_PWM_BIT,OUTPUT);
 37a:	4f ef       	ldi	r20, 0xFF	; 255
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
	
		switch(u8_frequency){
 384:	d4 36       	cpi	r29, 0x64	; 100
 386:	09 f1       	breq	.+66     	; 0x3ca <timer0SwPWM+0x80>
 388:	d8 3c       	cpi	r29, 0xC8	; 200
 38a:	e9 f5       	brne	.+122    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			case 200:
				PWM_TCNT_initialValue = 178;
 38c:	82 eb       	ldi	r24, 0xB2	; 178
 38e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				CTC_value =(uint8_t)((256-PWM_TCNT_initialValue) * u8_dutyCycle / 100)+PWM_TCNT_initialValue;
 392:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 396:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
				timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_1024,PWM_TCNT_initialValue,CTC_value,interrupt_mask);
 39a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	51 e0       	ldi	r21, 0x01	; 1
 3a2:	48 1b       	sub	r20, r24
 3a4:	51 09       	sbc	r21, r1
 3a6:	c4 9f       	mul	r28, r20
 3a8:	c0 01       	movw	r24, r0
 3aa:	c5 9f       	mul	r28, r21
 3ac:	90 0d       	add	r25, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	64 e6       	ldi	r22, 0x64	; 100
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	0e 94 08 02 	call	0x410	; 0x410 <__divmodhi4>
 3b8:	06 0f       	add	r16, r22
 3ba:	45 e0       	ldi	r20, 0x05	; 5
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <timer0Init>
				timer0Start();
 3c4:	0e 94 9f 01 	call	0x33e	; 0x33e <timer0Start>
				break;
 3c8:	1e c0       	rjmp	.+60     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			case 100:
				PWM_TCNT_initialValue = 100;
 3ca:	84 e6       	ldi	r24, 0x64	; 100
 3cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				CTC_value =(uint8_t)((256-PWM_TCNT_initialValue) * u8_dutyCycle / 100)+PWM_TCNT_initialValue;
 3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d4:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
				timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_1024,PWM_TCNT_initialValue,CTC_value,interrupt_mask);
 3d8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3dc:	40 e0       	ldi	r20, 0x00	; 0
 3de:	51 e0       	ldi	r21, 0x01	; 1
 3e0:	48 1b       	sub	r20, r24
 3e2:	51 09       	sbc	r21, r1
 3e4:	c4 9f       	mul	r28, r20
 3e6:	c0 01       	movw	r24, r0
 3e8:	c5 9f       	mul	r28, r21
 3ea:	90 0d       	add	r25, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	64 e6       	ldi	r22, 0x64	; 100
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	0e 94 08 02 	call	0x410	; 0x410 <__divmodhi4>
 3f6:	06 0f       	add	r16, r22
 3f8:	45 e0       	ldi	r20, 0x05	; 5
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <timer0Init>
				timer0Start();
 402:	0e 94 9f 01 	call	0x33e	; 0x33e <timer0Start>
		
// 		PWM_TCNT_initialValue =256 - MCU_FREQUECY/(prescaler*u8_frequency);
// 		timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,PWM_TCNT_initialValue,CTC_value,(T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP));
// 		timer0Start();
// 		PWM_TCNT_initialValue = 0;
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	0f 91       	pop	r16
 40c:	ef 90       	pop	r14
 40e:	08 95       	ret

00000410 <__divmodhi4>:
 410:	97 fb       	bst	r25, 7
 412:	07 2e       	mov	r0, r23
 414:	16 f4       	brtc	.+4      	; 0x41a <__divmodhi4+0xa>
 416:	00 94       	com	r0
 418:	07 d0       	rcall	.+14     	; 0x428 <__divmodhi4_neg1>
 41a:	77 fd       	sbrc	r23, 7
 41c:	09 d0       	rcall	.+18     	; 0x430 <__divmodhi4_neg2>
 41e:	0e 94 1c 02 	call	0x438	; 0x438 <__udivmodhi4>
 422:	07 fc       	sbrc	r0, 7
 424:	05 d0       	rcall	.+10     	; 0x430 <__divmodhi4_neg2>
 426:	3e f4       	brtc	.+14     	; 0x436 <__divmodhi4_exit>

00000428 <__divmodhi4_neg1>:
 428:	90 95       	com	r25
 42a:	81 95       	neg	r24
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	08 95       	ret

00000430 <__divmodhi4_neg2>:
 430:	70 95       	com	r23
 432:	61 95       	neg	r22
 434:	7f 4f       	sbci	r23, 0xFF	; 255

00000436 <__divmodhi4_exit>:
 436:	08 95       	ret

00000438 <__udivmodhi4>:
 438:	aa 1b       	sub	r26, r26
 43a:	bb 1b       	sub	r27, r27
 43c:	51 e1       	ldi	r21, 0x11	; 17
 43e:	07 c0       	rjmp	.+14     	; 0x44e <__udivmodhi4_ep>

00000440 <__udivmodhi4_loop>:
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	a6 17       	cp	r26, r22
 446:	b7 07       	cpc	r27, r23
 448:	10 f0       	brcs	.+4      	; 0x44e <__udivmodhi4_ep>
 44a:	a6 1b       	sub	r26, r22
 44c:	b7 0b       	sbc	r27, r23

0000044e <__udivmodhi4_ep>:
 44e:	88 1f       	adc	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	5a 95       	dec	r21
 454:	a9 f7       	brne	.-22     	; 0x440 <__udivmodhi4_loop>
 456:	80 95       	com	r24
 458:	90 95       	com	r25
 45a:	bc 01       	movw	r22, r24
 45c:	cd 01       	movw	r24, r26
 45e:	08 95       	ret

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
