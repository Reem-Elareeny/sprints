
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007fe  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000894  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002402  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1b  00000000  00000000  00002f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb1  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  00004ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c19  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e5e  00000000  00000000  00005d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007b9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_3>
  10:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_4>
  14:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 96 01 	call	0x32c	; 0x32c <main>
  8a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MotorDC_Init>:
#include "gpio.h"
#include "timers.h"
#include "dcMotor.h"

void MotorDC_Init(En_motorType_t en_motor_number){
		switch(en_motor_number){
  92:	88 23       	and	r24, r24
  94:	19 f0       	breq	.+6      	; 0x9c <MotorDC_Init+0xa>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	89 f0       	breq	.+34     	; 0xbc <MotorDC_Init+0x2a>
  9a:	08 95       	ret
			case MOT_1:
				gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
  9c:	4f ef       	ldi	r20, 0xFF	; 255
  9e:	60 e1       	ldi	r22, 0x10	; 16
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	64 e0       	ldi	r22, 0x04	; 4
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	68 e0       	ldi	r22, 0x08	; 8
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
				break;
  ba:	08 95       	ret
			case MOT_2:
				gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
  bc:	4f ef       	ldi	r20, 0xFF	; 255
  be:	60 e2       	ldi	r22, 0x20	; 32
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
  c6:	4f ef       	ldi	r20, 0xFF	; 255
  c8:	60 e4       	ldi	r22, 0x40	; 64
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
				gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	60 e8       	ldi	r22, 0x80	; 128
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
  da:	08 95       	ret

000000dc <MotorDC_Dir>:
				break;
		}
}

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir){
	switch(en_motor_number){
  dc:	88 23       	and	r24, r24
  de:	19 f0       	breq	.+6      	; 0xe6 <MotorDC_Dir+0xa>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	41 f1       	breq	.+80     	; 0x134 <MotorDC_Dir+0x58>
  e4:	08 95       	ret
		case MOT_1:
			switch(en_motor_dir){
  e6:	61 30       	cpi	r22, 0x01	; 1
  e8:	21 f0       	breq	.+8      	; 0xf2 <MotorDC_Dir+0x16>
  ea:	c8 f0       	brcs	.+50     	; 0x11e <MotorDC_Dir+0x42>
  ec:	62 30       	cpi	r22, 0x02	; 2
  ee:	61 f0       	breq	.+24     	; 0x108 <MotorDC_Dir+0x2c>
  f0:	08 95       	ret
				case FORWARD:
					gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, HIGH);
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	68 e0       	ldi	r22, 0x08	; 8
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					break;
 106:	08 95       	ret
				case BACKWARD:
					gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, HIGH);
 112:	4f ef       	ldi	r20, 0xFF	; 255
 114:	68 e0       	ldi	r22, 0x08	; 8
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					break;
 11c:	08 95       	ret
				case STOP:
					gpioPinWrite(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, LOW);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					gpioPinWrite(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, LOW);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	68 e0       	ldi	r22, 0x08	; 8
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					break;
 132:	08 95       	ret
				}
			break;
			
		case MOT_2:
			switch(en_motor_dir){
 134:	61 30       	cpi	r22, 0x01	; 1
 136:	21 f0       	breq	.+8      	; 0x140 <MotorDC_Dir+0x64>
 138:	c8 f0       	brcs	.+50     	; 0x16c <MotorDC_Dir+0x90>
 13a:	62 30       	cpi	r22, 0x02	; 2
 13c:	61 f0       	breq	.+24     	; 0x156 <MotorDC_Dir+0x7a>
 13e:	08 95       	ret
				case FORWARD:
					gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, HIGH);
 140:	4f ef       	ldi	r20, 0xFF	; 255
 142:	60 e4       	ldi	r22, 0x40	; 64
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	60 e8       	ldi	r22, 0x80	; 128
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					break;
 154:	08 95       	ret
				case BACKWARD:
					gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	60 e4       	ldi	r22, 0x40	; 64
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, HIGH);
 160:	4f ef       	ldi	r20, 0xFF	; 255
 162:	60 e8       	ldi	r22, 0x80	; 128
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					break;
 16a:	08 95       	ret
				case STOP:
					gpioPinWrite(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, LOW);
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	60 e4       	ldi	r22, 0x40	; 64
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
					gpioPinWrite(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	60 e8       	ldi	r22, 0x80	; 128
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 180:	08 95       	ret

00000182 <MotorDC_Speed_PollingWithT0>:
			break;
		}
}

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed){
	timer2SwPWM(50,100);
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <timer2SwPWM>
 18a:	08 95       	ret

0000018c <gpioPinDirection>:
	}
	return PORT_VALUE;
}

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction){
   if(u8_direction == OUTPUT){
 18c:	4f 3f       	cpi	r20, 0xFF	; 255
 18e:	c1 f4       	brne	.+48     	; 0x1c0 <gpioPinDirection+0x34>
	   switch(u8_port){
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	51 f0       	breq	.+20     	; 0x1a8 <gpioPinDirection+0x1c>
 194:	28 f0       	brcs	.+10     	; 0x1a0 <gpioPinDirection+0x14>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	59 f0       	breq	.+22     	; 0x1b0 <gpioPinDirection+0x24>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	69 f0       	breq	.+26     	; 0x1b8 <gpioPinDirection+0x2c>
 19e:	08 95       	ret
			case GPIOA:
				PORTA_DIR |= u8_pins;
 1a0:	8a b3       	in	r24, 0x1a	; 26
 1a2:	68 2b       	or	r22, r24
 1a4:	6a bb       	out	0x1a, r22	; 26
				break;
 1a6:	08 95       	ret
			case GPIOB:
				PORTB_DIR |= u8_pins;
 1a8:	87 b3       	in	r24, 0x17	; 23
 1aa:	68 2b       	or	r22, r24
 1ac:	67 bb       	out	0x17, r22	; 23
				break;
 1ae:	08 95       	ret
			case GPIOC:
				PORTC_DIR |= u8_pins;
 1b0:	84 b3       	in	r24, 0x14	; 20
 1b2:	68 2b       	or	r22, r24
 1b4:	64 bb       	out	0x14, r22	; 20
				break;
 1b6:	08 95       	ret
			case GPIOD:
				PORTD_DIR |= u8_pins;
 1b8:	81 b3       	in	r24, 0x11	; 17
 1ba:	68 2b       	or	r22, r24
 1bc:	61 bb       	out	0x11, r22	; 17
				break;
 1be:	08 95       	ret
			default:
			break;
		}
   }else if(u8_direction == INPUT){
 1c0:	41 11       	cpse	r20, r1
 1c2:	1b c0       	rjmp	.+54     	; 0x1fa <gpioPinDirection+0x6e>
	   switch(u8_port){
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	59 f0       	breq	.+22     	; 0x1de <gpioPinDirection+0x52>
 1c8:	28 f0       	brcs	.+10     	; 0x1d4 <gpioPinDirection+0x48>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	69 f0       	breq	.+26     	; 0x1e8 <gpioPinDirection+0x5c>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	81 f0       	breq	.+32     	; 0x1f2 <gpioPinDirection+0x66>
 1d2:	08 95       	ret
		case GPIOA:
			PORTA_DIR &= ~(u8_pins);
 1d4:	8a b3       	in	r24, 0x1a	; 26
 1d6:	60 95       	com	r22
 1d8:	68 23       	and	r22, r24
 1da:	6a bb       	out	0x1a, r22	; 26
			break;
 1dc:	08 95       	ret
		case GPIOB:
			PORTB_DIR &= ~(u8_pins);
 1de:	87 b3       	in	r24, 0x17	; 23
 1e0:	60 95       	com	r22
 1e2:	68 23       	and	r22, r24
 1e4:	67 bb       	out	0x17, r22	; 23
			break;
 1e6:	08 95       	ret
		case GPIOC:
			PORTC_DIR &= ~(u8_pins);
 1e8:	84 b3       	in	r24, 0x14	; 20
 1ea:	60 95       	com	r22
 1ec:	68 23       	and	r22, r24
 1ee:	64 bb       	out	0x14, r22	; 20
			break;
 1f0:	08 95       	ret
		case GPIOD:
			PORTD_DIR &= ~(u8_pins);
 1f2:	81 b3       	in	r24, 0x11	; 17
 1f4:	60 95       	com	r22
 1f6:	68 23       	and	r22, r24
 1f8:	61 bb       	out	0x11, r22	; 17
 1fa:	08 95       	ret

000001fc <gpioPinWrite>:
		break;   
		}
	}
}
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value){
   if(u8_value == OUTPUT){
 1fc:	4f 3f       	cpi	r20, 0xFF	; 255
 1fe:	c1 f4       	brne	.+48     	; 0x230 <gpioPinWrite+0x34>
		switch(u8_port){
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	51 f0       	breq	.+20     	; 0x218 <gpioPinWrite+0x1c>
 204:	28 f0       	brcs	.+10     	; 0x210 <gpioPinWrite+0x14>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	59 f0       	breq	.+22     	; 0x220 <gpioPinWrite+0x24>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	69 f0       	breq	.+26     	; 0x228 <gpioPinWrite+0x2c>
 20e:	08 95       	ret
			case GPIOA:
				PORTA_DATA |= u8_pins;
 210:	8b b3       	in	r24, 0x1b	; 27
 212:	68 2b       	or	r22, r24
 214:	6b bb       	out	0x1b, r22	; 27
				break;
 216:	08 95       	ret
			case GPIOB:
				PORTB_DATA |= u8_pins;
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	68 2b       	or	r22, r24
 21c:	68 bb       	out	0x18, r22	; 24
				break;
 21e:	08 95       	ret
			case GPIOC:
				PORTC_DATA |= u8_pins;
 220:	85 b3       	in	r24, 0x15	; 21
 222:	68 2b       	or	r22, r24
 224:	65 bb       	out	0x15, r22	; 21
				break;
 226:	08 95       	ret
			case GPIOD:
				PORTD_DATA |= u8_pins;
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	68 2b       	or	r22, r24
 22c:	62 bb       	out	0x12, r22	; 18
				break;
 22e:	08 95       	ret
			default:
			break;
		}
	}else if(u8_value == INPUT){
 230:	41 11       	cpse	r20, r1
 232:	1b c0       	rjmp	.+54     	; 0x26a <gpioPinWrite+0x6e>
		switch(u8_port){
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	59 f0       	breq	.+22     	; 0x24e <gpioPinWrite+0x52>
 238:	28 f0       	brcs	.+10     	; 0x244 <gpioPinWrite+0x48>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	69 f0       	breq	.+26     	; 0x258 <gpioPinWrite+0x5c>
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	81 f0       	breq	.+32     	; 0x262 <gpioPinWrite+0x66>
 242:	08 95       	ret
		case GPIOA:
			PORTA_DATA &= ~(u8_pins);
 244:	8b b3       	in	r24, 0x1b	; 27
 246:	60 95       	com	r22
 248:	68 23       	and	r22, r24
 24a:	6b bb       	out	0x1b, r22	; 27
			break;
 24c:	08 95       	ret
		case GPIOB:
			PORTB_DATA &= ~(u8_pins);
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	60 95       	com	r22
 252:	68 23       	and	r22, r24
 254:	68 bb       	out	0x18, r22	; 24
			break;
 256:	08 95       	ret
		case GPIOC:
			PORTC_DATA &= ~(u8_pins);
 258:	85 b3       	in	r24, 0x15	; 21
 25a:	60 95       	com	r22
 25c:	68 23       	and	r22, r24
 25e:	65 bb       	out	0x15, r22	; 21
			break;
 260:	08 95       	ret
		case GPIOD:
			PORTD_DATA &= ~(u8_pins);
 262:	82 b3       	in	r24, 0x12	; 18
 264:	60 95       	com	r22
 266:	68 23       	and	r22, r24
 268:	62 bb       	out	0x12, r22	; 18
 26a:	08 95       	ret

0000026c <Led_Init>:
#include "led.h"

void Led_Init(En_LedNumber_t en_led_id){
	switch(en_led_id){
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	61 f0       	breq	.+24     	; 0x288 <Led_Init+0x1c>
 270:	28 f0       	brcs	.+10     	; 0x27c <Led_Init+0x10>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	79 f0       	breq	.+30     	; 0x294 <Led_Init+0x28>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	99 f0       	breq	.+38     	; 0x2a0 <Led_Init+0x34>
 27a:	08 95       	ret
		case LED_0:
			gpioPinDirection(LED_0_GPIO,LED_0_BIT, OUTPUT);
 27c:	4f ef       	ldi	r20, 0xFF	; 255
 27e:	60 e1       	ldi	r22, 0x10	; 16
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
			break;
 286:	08 95       	ret
		case LED_1:
			gpioPinDirection(LED_1_GPIO,LED_1_BIT,OUTPUT);
 288:	4f ef       	ldi	r20, 0xFF	; 255
 28a:	60 e2       	ldi	r22, 0x20	; 32
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
			break;
 292:	08 95       	ret
		case LED_2:
			gpioPinDirection(LED_2_GPIO,LED_2_BIT,OUTPUT);
 294:	4f ef       	ldi	r20, 0xFF	; 255
 296:	60 e4       	ldi	r22, 0x40	; 64
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
			break;
 29e:	08 95       	ret
		case LED_3:
			gpioPinDirection(LED_3_GPIO,LED_3_BIT,OUTPUT);
 2a0:	4f ef       	ldi	r20, 0xFF	; 255
 2a2:	60 e8       	ldi	r22, 0x80	; 128
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
 2aa:	08 95       	ret

000002ac <Led_On>:
		break;
	}	
}

void Led_On(En_LedNumber_t en_led_id){
		switch(en_led_id){
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	61 f0       	breq	.+24     	; 0x2c8 <Led_On+0x1c>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <Led_On+0x10>
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	79 f0       	breq	.+30     	; 0x2d4 <Led_On+0x28>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	99 f0       	breq	.+38     	; 0x2e0 <Led_On+0x34>
 2ba:	08 95       	ret
		case LED_0:
			gpioPinWrite(LED_0_GPIO, LED_0_BIT , HIGH);
 2bc:	4f ef       	ldi	r20, 0xFF	; 255
 2be:	60 e1       	ldi	r22, 0x10	; 16
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
			break;
 2c6:	08 95       	ret
		case LED_1:
			gpioPinWrite(LED_1_GPIO, LED_1_BIT , HIGH);
 2c8:	4f ef       	ldi	r20, 0xFF	; 255
 2ca:	60 e2       	ldi	r22, 0x20	; 32
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
			break;
 2d2:	08 95       	ret
		case LED_2:
			gpioPinWrite(LED_2_GPIO, LED_2_BIT , HIGH);
 2d4:	4f ef       	ldi	r20, 0xFF	; 255
 2d6:	60 e4       	ldi	r22, 0x40	; 64
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
			break;
 2de:	08 95       	ret
		case LED_3:
			gpioPinWrite(LED_3_GPIO, LED_3_BIT , HIGH);
 2e0:	4f ef       	ldi	r20, 0xFF	; 255
 2e2:	60 e8       	ldi	r22, 0x80	; 128
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 2ea:	08 95       	ret

000002ec <Led_Off>:
	}	
}


void Led_Off(En_LedNumber_t en_led_id){
	switch(en_led_id){
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	61 f0       	breq	.+24     	; 0x308 <Led_Off+0x1c>
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <Led_Off+0x10>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	79 f0       	breq	.+30     	; 0x314 <Led_Off+0x28>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	99 f0       	breq	.+38     	; 0x320 <Led_Off+0x34>
 2fa:	08 95       	ret
		case LED_0:
			gpioPinWrite(LED_0_GPIO, LED_0_BIT , LOW);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
			break;
 306:	08 95       	ret
		case LED_1:
			gpioPinWrite(LED_1_GPIO, LED_1_BIT , LOW);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	60 e2       	ldi	r22, 0x20	; 32
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
			break;
 312:	08 95       	ret
		case LED_2:
			gpioPinWrite(LED_2_GPIO, LED_2_BIT , LOW);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	60 e4       	ldi	r22, 0x40	; 64
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
			break;
 31e:	08 95       	ret
		case LED_3:
			gpioPinWrite(LED_3_GPIO, LED_3_BIT , LOW);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	60 e8       	ldi	r22, 0x80	; 128
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 32a:	08 95       	ret

0000032c <main>:
#include <util/delay.h>
extern volatile uint8_t inputStatus;
//extern volatile uint8_t TCNT_value;

int main(void)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	1f 92       	push	r1
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62

	 	MotorDC_Init(MOT_1);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>
		MotorDC_Init(MOT_2);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 49 00 	call	0x92	; 0x92 <MotorDC_Init>

	 	MotorDC_Dir(MOT_1, FORWARD);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 6e 00 	call	0xdc	; 0xdc <MotorDC_Dir>
	 	MotorDC_Dir(MOT_2, FORWARD);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 6e 00 	call	0xdc	; 0xdc <MotorDC_Dir>
		MotorDC_Speed_PollingWithT0(50);
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	0e 94 c1 00 	call	0x182	; 0x182 <MotorDC_Speed_PollingWithT0>
// 	PORTB_DIR &= ~(BIT3);
// 	MCUCSR |= BIT6;
//  GICR |= BIT5;


		uint8_t TCNT_value = 0;
 358:	19 82       	std	Y+1, r1	; 0x01
		uint8_t distance = 0;
		Led_Init(LED_0);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
		Led_Init(LED_1);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
		Led_Init(LED_2);
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
		Led_Init(LED_3);
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
		gpioPinDirection(GPIOA,BIT3,OUTPUT);
 372:	4f ef       	ldi	r20, 0xFF	; 255
 374:	68 e0       	ldi	r22, 0x08	; 8
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
		SwICU_Init(SwICU_EdgeRisiging);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 4e 02 	call	0x49c	; 0x49c <SwICU_Init>
		timer0Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_64,0x00,0x00,T2_POLLING);
 382:	e1 2c       	mov	r14, r1
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	44 e0       	ldi	r20, 0x04	; 4
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 04 03 	call	0x608	; 0x608 <timer0Init>
		while(3 != inputStatus);
		
		SwICU_Read(&TCNT_value);
		distance = (TCNT_value *8)/58;

		if(distance <= 5){
 392:	0a e3       	ldi	r16, 0x3A	; 58
 394:	10 e0       	ldi	r17, 0x00	; 0
		timer0Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_64,0x00,0x00,T2_POLLING);
		
	while(1){
		 

		gpioPinWrite(GPIOA,BIT3,HIGH);
 396:	4f ef       	ldi	r20, 0xFF	; 255
 398:	68 e0       	ldi	r22, 0x08	; 8
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	89 ef       	ldi	r24, 0xF9	; 249
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <main+0x78>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0x7e>
 3aa:	00 00       	nop
		//timer2DelayMs(100);
		_delay_ms(1);
		gpioPinWrite(GPIOA,BIT3,LOW);
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	68 e0       	ldi	r22, 0x08	; 8
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
		//while(!(GIFR & BIT5));
		
		while(3 != inputStatus);
 3b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x8a>
		
		SwICU_Read(&TCNT_value);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 27 02 	call	0x44e	; 0x44e <SwICU_Read>
		distance = (TCNT_value *8)/58;

		if(distance <= 5){
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	b8 01       	movw	r22, r16
 3d8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__divmodhi4>
 3dc:	66 30       	cpi	r22, 0x06	; 6
 3de:	a8 f4       	brcc	.+42     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			MotorDC_Dir(MOT_1, STOP);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 6e 00 	call	0xdc	; 0xdc <MotorDC_Dir>
			MotorDC_Dir(MOT_2, STOP);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 6e 00 	call	0xdc	; 0xdc <MotorDC_Dir>
			Led_Init(LED_0);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
			Led_On(LED_0);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 56 01 	call	0x2ac	; 0x2ac <Led_On>
			Led_Init(LED_1);
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
			Led_Off(LED_1);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 76 01 	call	0x2ec	; 0x2ec <Led_Off>
 408:	14 c0       	rjmp	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		}else{
			MotorDC_Dir(MOT_1, FORWARD);
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 6e 00 	call	0xdc	; 0xdc <MotorDC_Dir>
			MotorDC_Dir(MOT_2, FORWARD);
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 6e 00 	call	0xdc	; 0xdc <MotorDC_Dir>
			Led_Init(LED_1);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
			Led_On(LED_1);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 56 01 	call	0x2ac	; 0x2ac <Led_On>
			Led_Init(LED_0);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
			Led_Off(LED_0);
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 76 01 	call	0x2ec	; 0x2ec <Led_Off>
// 			Led_Off(LED_1);
// 			Led_Off(LED_2);
// 			Led_Off(LED_3);
// 			break;
//  		}
 		TCNT0 = 0;
 432:	12 be       	out	0x32, r1	; 50
		//timer2DelayMs(200);
		inputStatus = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 43a:	9f e3       	ldi	r25, 0x3F	; 63
 43c:	2d e0       	ldi	r18, 0x0D	; 13
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	91 50       	subi	r25, 0x01	; 1
 442:	20 40       	sbci	r18, 0x00	; 0
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
 44c:	a4 cf       	rjmp	.-184    	; 0x396 <main+0x6a>

0000044e <SwICU_Read>:
void SwICU_Stop(void){
	timer0Stop();
}

void SwICU_Start(void){
	timer0Start();
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
 454:	0e 94 30 03 	call	0x660	; 0x660 <timer0Read>
 458:	88 83       	st	Y, r24
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <SwICU_Enable>:
}

void SwICU_Enable(void){
	GICR |= BIT5;
 460:	8b b7       	in	r24, 0x3b	; 59
 462:	80 62       	ori	r24, 0x20	; 32
 464:	8b bf       	out	0x3b, r24	; 59
 466:	08 95       	ret

00000468 <SwICU_Disable>:
}

void SwICU_Disable(void){
	GICR &= ~(BIT5);
 468:	8b b7       	in	r24, 0x3b	; 59
 46a:	8f 7d       	andi	r24, 0xDF	; 223
 46c:	8b bf       	out	0x3b, r24	; 59
 46e:	08 95       	ret

00000470 <SwICU_SetCfgEdge>:
// 
// EN_SwICU_Edge_t SwICU_GetCfgEdge(void){
// 	
// }

void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdge){
 470:	cf 93       	push	r28
 472:	c8 2f       	mov	r28, r24
	SwICU_Disable();
 474:	0e 94 34 02 	call	0x468	; 0x468 <SwICU_Disable>
	switch(a_en_inputCaptureEdge){
 478:	cc 23       	and	r28, r28
 47a:	31 f0       	breq	.+12     	; 0x488 <SwICU_SetCfgEdge+0x18>
 47c:	c1 30       	cpi	r28, 0x01	; 1
 47e:	39 f4       	brne	.+14     	; 0x48e <SwICU_SetCfgEdge+0x1e>
		case SwICU_EdgeRisiging:			
			MCUCSR |= BIT6;
 480:	84 b7       	in	r24, 0x34	; 52
 482:	80 64       	ori	r24, 0x40	; 64
 484:	84 bf       	out	0x34, r24	; 52
			break;
 486:	03 c0       	rjmp	.+6      	; 0x48e <SwICU_SetCfgEdge+0x1e>
		case SwICU_EdgeFalling:
			MCUCSR &= ~BIT6;
 488:	84 b7       	in	r24, 0x34	; 52
 48a:	8f 7b       	andi	r24, 0xBF	; 191
 48c:	84 bf       	out	0x34, r24	; 52
			break;
	}
	GIFR &= ~(BIT5);
 48e:	8a b7       	in	r24, 0x3a	; 58
 490:	8f 7d       	andi	r24, 0xDF	; 223
 492:	8a bf       	out	0x3a, r24	; 58
	SwICU_Enable();
 494:	0e 94 30 02 	call	0x460	; 0x460 <SwICU_Enable>

}
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <SwICU_Init>:
#include "led.h"

static EN_SwICU_Edge_t en_inputCaptureEdge = SwICU_EdgeFalling;
volatile uint8_t inputStatus = 1;
//volatile uint8_t TCNT_value = 0;
void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge){
 49c:	ef 92       	push	r14
 49e:	0f 93       	push	r16
 4a0:	cf 93       	push	r28
 4a2:	c8 2f       	mov	r28, r24
	sei();
 4a4:	8f b7       	in	r24, 0x3f	; 63
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	8f bf       	out	0x3f, r24	; 63
	GIFR &= ~(BIT5);
 4aa:	8a b7       	in	r24, 0x3a	; 58
 4ac:	8f 7d       	andi	r24, 0xDF	; 223
 4ae:	8a bf       	out	0x3a, r24	; 58
	gpioPinDirection(INT2_GPIO,INT2_BIT,INPUT);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0x00, 0x00, T0_POLLING);
 4ba:	e1 2c       	mov	r14, r1
 4bc:	00 e0       	ldi	r16, 0x00	; 0
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	43 e0       	ldi	r20, 0x03	; 3
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 04 03 	call	0x608	; 0x608 <timer0Init>
	SwICU_SetCfgEdge(a_en_inputCaptureEdge);
 4ca:	8c 2f       	mov	r24, r28
 4cc:	0e 94 38 02 	call	0x470	; 0x470 <SwICU_SetCfgEdge>
	SwICU_Enable();
 4d0:	0e 94 30 02 	call	0x460	; 0x460 <SwICU_Enable>
}
 4d4:	cf 91       	pop	r28
 4d6:	0f 91       	pop	r16
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <__vector_3>:

void SwICU_Disable(void){
	GICR &= ~(BIT5);
}

INTERRUPT_SERVICE_ROTINE(INT2_vector){
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
	//Led_On(LED_0);
	if(inputStatus == 1){
 4fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	49 f4       	brne	.+18     	; 0x518 <__vector_3+0x3c>
void SwICU_Read(volatile uint8_t * a_pu8_capt){
	*a_pu8_capt  = timer0Read();
}

void SwICU_Stop(void){
	timer0Stop();
 506:	0e 94 38 03 	call	0x670	; 0x670 <timer0Stop>

INTERRUPT_SERVICE_ROTINE(INT2_vector){
	//Led_On(LED_0);
	if(inputStatus == 1){
		SwICU_Stop();
		SwICU_SetCfgEdge(SwICU_EdgeFalling);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	0e 94 38 02 	call	0x470	; 0x470 <SwICU_SetCfgEdge>
		inputStatus = 2;
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 516:	0c c0       	rjmp	.+24     	; 0x530 <__vector_3+0x54>
			
		//Led_On(LED_0);
	}else if (inputStatus== 2){
 518:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	41 f4       	brne	.+16     	; 0x530 <__vector_3+0x54>
void SwICU_Stop(void){
	timer0Stop();
}

void SwICU_Start(void){
	timer0Start();
 520:	0e 94 32 03 	call	0x664	; 0x664 <timer0Start>
		inputStatus = 2;
			
		//Led_On(LED_0);
	}else if (inputStatus== 2){
		SwICU_Start();
		SwICU_SetCfgEdge(SwICU_EdgeRisiging);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 38 02 	call	0x470	; 0x470 <SwICU_SetCfgEdge>
		//TCNT_value = TCNT0;
		//TCNT0 = 0x00;
		inputStatus = 3;
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		//Led_Off(LED_0);
	}
}
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__vector_5>:
	}
	else{// interrupt enabled
		sei();
		timer2Start();
	}
}
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	6f 93       	push	r22
 566:	7f 93       	push	r23
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	af 93       	push	r26
 56e:	bf 93       	push	r27
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
 574:	4f ef       	ldi	r20, 0xFF	; 255
 576:	60 e1       	ldi	r22, 0x10	; 16
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 57e:	4f ef       	ldi	r20, 0xFF	; 255
 580:	60 e2       	ldi	r22, 0x20	; 32
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 588:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 58c:	82 bf       	out	0x32, r24	; 50
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_4>:
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	60 e1       	ldi	r22, 0x10	; 16
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 5dc:	40 e0       	ldi	r20, 0x00	; 0
 5de:	60 e2       	ldi	r22, 0x20	; 32
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <gpioPinWrite>
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <timer0Init>:
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	d8 2f       	mov	r29, r24
 616:	c6 2f       	mov	r28, r22
 618:	14 2f       	mov	r17, r20
 61a:	f2 2e       	mov	r15, r18
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
 622:	12 be       	out	0x32, r1	; 50
 624:	13 be       	out	0x33, r1	; 51
 626:	1c be       	out	0x3c, r1	; 60
 628:	83 b7       	in	r24, 0x33	; 51
 62a:	d8 2b       	or	r29, r24
 62c:	d3 bf       	out	0x33, r29	; 51
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	c8 2b       	or	r28, r24
 632:	c3 bf       	out	0x33, r28	; 51
 634:	ee 20       	and	r14, r14
 636:	19 f0       	breq	.+6      	; 0x63e <timer0Init+0x36>
 638:	8f b7       	in	r24, 0x3f	; 63
 63a:	80 68       	ori	r24, 0x80	; 128
 63c:	8f bf       	out	0x3f, r24	; 63
 63e:	89 b7       	in	r24, 0x39	; 57
 640:	8c 7f       	andi	r24, 0xFC	; 252
 642:	89 bf       	out	0x39, r24	; 57
 644:	89 b7       	in	r24, 0x39	; 57
 646:	e8 2a       	or	r14, r24
 648:	e9 be       	out	0x39, r14	; 57
 64a:	f2 be       	out	0x32, r15	; 50
 64c:	0c bf       	out	0x3c, r16	; 60
 64e:	10 93 64 00 	sts	0x0064, r17	; 0x800064 <T0_prescaler>
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	08 95       	ret

00000660 <timer0Read>:
 660:	82 b7       	in	r24, 0x32	; 50
 662:	08 95       	ret

00000664 <timer0Start>:
 664:	93 b7       	in	r25, 0x33	; 51
 666:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <T0_prescaler>
 66a:	89 2b       	or	r24, r25
 66c:	83 bf       	out	0x33, r24	; 51
 66e:	08 95       	ret

00000670 <timer0Stop>:
 670:	83 b7       	in	r24, 0x33	; 51
 672:	88 7f       	andi	r24, 0xF8	; 248
 674:	83 bf       	out	0x33, r24	; 51
 676:	08 95       	ret

00000678 <timer2Init>:
 678:	cf 92       	push	r12
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	d8 2f       	mov	r29, r24
 688:	c6 2f       	mov	r28, r22
 68a:	14 2f       	mov	r17, r20
 68c:	f2 2e       	mov	r15, r18
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 36 01 	call	0x26c	; 0x26c <Led_Init>
 694:	14 bc       	out	0x24, r1	; 36
 696:	15 bc       	out	0x25, r1	; 37
 698:	13 bc       	out	0x23, r1	; 35
 69a:	e2 bc       	out	0x22, r14	; 34
 69c:	85 b5       	in	r24, 0x25	; 37
 69e:	d8 2b       	or	r29, r24
 6a0:	d5 bd       	out	0x25, r29	; 37
 6a2:	85 b5       	in	r24, 0x25	; 37
 6a4:	c8 2b       	or	r28, r24
 6a6:	c5 bd       	out	0x25, r28	; 37
 6a8:	89 b7       	in	r24, 0x39	; 57
 6aa:	8f 73       	andi	r24, 0x3F	; 63
 6ac:	89 bf       	out	0x39, r24	; 57
 6ae:	89 b7       	in	r24, 0x39	; 57
 6b0:	c8 2a       	or	r12, r24
 6b2:	c9 be       	out	0x39, r12	; 57
 6b4:	f4 bc       	out	0x24, r15	; 36
 6b6:	03 bd       	out	0x23, r16	; 35
 6b8:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <T2_prescaler>
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	cf 90       	pop	r12
 6ca:	08 95       	ret

000006cc <timer2Start>:
 6cc:	95 b5       	in	r25, 0x25	; 37
 6ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <T2_prescaler>
 6d2:	89 2b       	or	r24, r25
 6d4:	85 bd       	out	0x25, r24	; 37
 6d6:	08 95       	ret

000006d8 <timer2SwPWM>:


void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency){
 6d8:	cf 92       	push	r12
 6da:	ef 92       	push	r14
 6dc:	0f 93       	push	r16
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	c8 2f       	mov	r28, r24
 6e4:	d6 2f       	mov	r29, r22
	uint8_t CTC_value = 0;
	uint8_t interrupt_mask = 0;
	//freq/(prescaler * 1+256)
	if(u8_dutyCycle == 100){
 6e6:	84 36       	cpi	r24, 0x64	; 100
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <timer2SwPWM+0x20>
		CTC_value = 0;
			interrupt_mask = (T2_INTERRUPT_NORMAL);
		}else if(u8_dutyCycle == 0){
 6ea:	88 23       	and	r24, r24
 6ec:	49 f0       	breq	.+18     	; 0x700 <timer2SwPWM+0x28>
			interrupt_mask = (T2_COMP_MODE);
		}else{
			CTC_value =(uint8_t)(256 * u8_dutyCycle / 100);
			interrupt_mask = (T2_INTERRUPT_NORMAL | T2_INTERRUPT_CMP);
 6ee:	0f 2e       	mov	r0, r31
 6f0:	f0 ec       	ldi	r31, 0xC0	; 192
 6f2:	cf 2e       	mov	r12, r31
 6f4:	f0 2d       	mov	r31, r0
 6f6:	07 c0       	rjmp	.+14     	; 0x706 <timer2SwPWM+0x2e>
	uint8_t CTC_value = 0;
	uint8_t interrupt_mask = 0;
	//freq/(prescaler * 1+256)
	if(u8_dutyCycle == 100){
		CTC_value = 0;
			interrupt_mask = (T2_INTERRUPT_NORMAL);
 6f8:	68 94       	set
 6fa:	cc 24       	eor	r12, r12
 6fc:	c6 f8       	bld	r12, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <timer2SwPWM+0x2e>
		}else if(u8_dutyCycle == 0){
			interrupt_mask = (T2_COMP_MODE);
 700:	68 94       	set
 702:	cc 24       	eor	r12, r12
 704:	c3 f8       	bld	r12, 3
		}else{
			CTC_value =(uint8_t)(256 * u8_dutyCycle / 100);
			interrupt_mask = (T2_INTERRUPT_NORMAL | T2_INTERRUPT_CMP);
	}
	//interrupt_mask = (T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP);
	sei();
 706:	8f b7       	in	r24, 0x3f	; 63
 708:	80 68       	ori	r24, 0x80	; 128
 70a:	8f bf       	out	0x3f, r24	; 63
	gpioPinDirection(T2_PWM_GPIO,T2_PWM_BIT,OUTPUT);
 70c:	4f ef       	ldi	r20, 0xFF	; 255
 70e:	64 e0       	ldi	r22, 0x04	; 4
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	0e 94 c6 00 	call	0x18c	; 0x18c <gpioPinDirection>
	
	switch(u8_frequency){
 716:	d4 36       	cpi	r29, 0x64	; 100
 718:	19 f1       	breq	.+70     	; 0x760 <timer2SwPWM+0x88>
 71a:	d8 3c       	cpi	r29, 0xC8	; 200
 71c:	09 f0       	breq	.+2      	; 0x720 <timer2SwPWM+0x48>
 71e:	3f c0       	rjmp	.+126    	; 0x79e <timer2SwPWM+0xc6>
		case 200:
			PWM_TCNT_initialValue = 178;
 720:	82 eb       	ldi	r24, 0xB2	; 178
 722:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			CTC_value =(uint8_t)((256-PWM_TCNT_initialValue) * u8_dutyCycle / 100)+PWM_TCNT_initialValue;
 726:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 72a:	00 91 62 00 	lds	r16, 0x0062	; 0x800062 <__data_end>
			timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_1024,PWM_TCNT_initialValue,CTC_value,0x00,interrupt_mask);
 72e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	51 e0       	ldi	r21, 0x01	; 1
 736:	48 1b       	sub	r20, r24
 738:	51 09       	sbc	r21, r1
 73a:	c4 9f       	mul	r28, r20
 73c:	c0 01       	movw	r24, r0
 73e:	c5 9f       	mul	r28, r21
 740:	90 0d       	add	r25, r0
 742:	11 24       	eor	r1, r1
 744:	64 e6       	ldi	r22, 0x64	; 100
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__divmodhi4>
 74c:	06 0f       	add	r16, r22
 74e:	e1 2c       	mov	r14, r1
 750:	47 e0       	ldi	r20, 0x07	; 7
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	0e 94 3c 03 	call	0x678	; 0x678 <timer2Init>
			timer2Start();
 75a:	0e 94 66 03 	call	0x6cc	; 0x6cc <timer2Start>
			break;
 75e:	1f c0       	rjmp	.+62     	; 0x79e <timer2SwPWM+0xc6>
		case 100:
			PWM_TCNT_initialValue = 100;
 760:	84 e6       	ldi	r24, 0x64	; 100
 762:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			CTC_value =(uint8_t)((256-PWM_TCNT_initialValue) * u8_dutyCycle / 100)+PWM_TCNT_initialValue;
 766:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 76a:	00 91 62 00 	lds	r16, 0x0062	; 0x800062 <__data_end>
			timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_1024,PWM_TCNT_initialValue,CTC_value,0x00,interrupt_mask);
 76e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	51 e0       	ldi	r21, 0x01	; 1
 776:	48 1b       	sub	r20, r24
 778:	51 09       	sbc	r21, r1
 77a:	c4 9f       	mul	r28, r20
 77c:	c0 01       	movw	r24, r0
 77e:	c5 9f       	mul	r28, r21
 780:	90 0d       	add	r25, r0
 782:	11 24       	eor	r1, r1
 784:	64 e6       	ldi	r22, 0x64	; 100
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__divmodhi4>
 78c:	06 0f       	add	r16, r22
 78e:	e1 2c       	mov	r14, r1
 790:	47 e0       	ldi	r20, 0x07	; 7
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	0e 94 3c 03 	call	0x678	; 0x678 <timer2Init>
			timer2Start();
 79a:	0e 94 66 03 	call	0x6cc	; 0x6cc <timer2Start>
	
	// 		PWM_TCNT_initialValue =256 - MCU_FREQUECY/(prescaler*u8_frequency);
	// 		timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,PWM_TCNT_initialValue,CTC_value,(T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP));
	// 		timer0Start();
	// 		PWM_TCNT_initialValue = 0;
}
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	0f 91       	pop	r16
 7a4:	ef 90       	pop	r14
 7a6:	cf 90       	pop	r12
 7a8:	08 95       	ret

000007aa <__divmodhi4>:
 7aa:	97 fb       	bst	r25, 7
 7ac:	07 2e       	mov	r0, r23
 7ae:	16 f4       	brtc	.+4      	; 0x7b4 <__divmodhi4+0xa>
 7b0:	00 94       	com	r0
 7b2:	07 d0       	rcall	.+14     	; 0x7c2 <__divmodhi4_neg1>
 7b4:	77 fd       	sbrc	r23, 7
 7b6:	09 d0       	rcall	.+18     	; 0x7ca <__divmodhi4_neg2>
 7b8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__udivmodhi4>
 7bc:	07 fc       	sbrc	r0, 7
 7be:	05 d0       	rcall	.+10     	; 0x7ca <__divmodhi4_neg2>
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__divmodhi4_exit>

000007c2 <__divmodhi4_neg1>:
 7c2:	90 95       	com	r25
 7c4:	81 95       	neg	r24
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	08 95       	ret

000007ca <__divmodhi4_neg2>:
 7ca:	70 95       	com	r23
 7cc:	61 95       	neg	r22
 7ce:	7f 4f       	sbci	r23, 0xFF	; 255

000007d0 <__divmodhi4_exit>:
 7d0:	08 95       	ret

000007d2 <__udivmodhi4>:
 7d2:	aa 1b       	sub	r26, r26
 7d4:	bb 1b       	sub	r27, r27
 7d6:	51 e1       	ldi	r21, 0x11	; 17
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <__udivmodhi4_ep>

000007da <__udivmodhi4_loop>:
 7da:	aa 1f       	adc	r26, r26
 7dc:	bb 1f       	adc	r27, r27
 7de:	a6 17       	cp	r26, r22
 7e0:	b7 07       	cpc	r27, r23
 7e2:	10 f0       	brcs	.+4      	; 0x7e8 <__udivmodhi4_ep>
 7e4:	a6 1b       	sub	r26, r22
 7e6:	b7 0b       	sbc	r27, r23

000007e8 <__udivmodhi4_ep>:
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	5a 95       	dec	r21
 7ee:	a9 f7       	brne	.-22     	; 0x7da <__udivmodhi4_loop>
 7f0:	80 95       	com	r24
 7f2:	90 95       	com	r25
 7f4:	bc 01       	movw	r22, r24
 7f6:	cd 01       	movw	r24, r26
 7f8:	08 95       	ret

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
