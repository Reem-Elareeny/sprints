
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000792  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b7  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4c  00000000  00000000  00002f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e6  00000000  00000000  00003cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000804  00000000  00000000  00004fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001073  00000000  00000000  000057a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000230e  00000000  00000000  00006817  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_4>
  14:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_9>
  28:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_10>
  2c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_11>
  30:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_12>
  34:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  8a:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPinDirection>:
	PORTC_DATA^=u8_pins;

			break;
			
			case GPIOD :
	 PORTD_DATA^=u8_pins;
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	a1 f0       	breq	.+40     	; 0xbe <gpioPinDirection+0x2c>
  96:	28 f0       	brcs	.+10     	; 0xa2 <gpioPinDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	f9 f0       	breq	.+62     	; 0xda <gpioPinDirection+0x48>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	59 f1       	breq	.+86     	; 0xf6 <gpioPinDirection+0x64>
  a0:	08 95       	ret
  a2:	44 23       	and	r20, r20
  a4:	19 f0       	breq	.+6      	; 0xac <gpioPinDirection+0x1a>
  a6:	4f 3f       	cpi	r20, 0xFF	; 255
  a8:	31 f0       	breq	.+12     	; 0xb6 <gpioPinDirection+0x24>
  aa:	08 95       	ret
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	60 95       	com	r22
  b0:	68 23       	and	r22, r24
  b2:	6a bb       	out	0x1a, r22	; 26
  b4:	08 95       	ret
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	68 2b       	or	r22, r24
  ba:	6a bb       	out	0x1a, r22	; 26
  bc:	08 95       	ret
  be:	44 23       	and	r20, r20
  c0:	19 f0       	breq	.+6      	; 0xc8 <gpioPinDirection+0x36>
  c2:	4f 3f       	cpi	r20, 0xFF	; 255
  c4:	31 f0       	breq	.+12     	; 0xd2 <gpioPinDirection+0x40>
  c6:	08 95       	ret
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	60 95       	com	r22
  cc:	68 23       	and	r22, r24
  ce:	67 bb       	out	0x17, r22	; 23
  d0:	08 95       	ret
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	68 2b       	or	r22, r24
  d6:	67 bb       	out	0x17, r22	; 23
  d8:	08 95       	ret
  da:	44 23       	and	r20, r20
  dc:	19 f0       	breq	.+6      	; 0xe4 <gpioPinDirection+0x52>
  de:	4f 3f       	cpi	r20, 0xFF	; 255
  e0:	31 f0       	breq	.+12     	; 0xee <gpioPinDirection+0x5c>
  e2:	08 95       	ret
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	60 95       	com	r22
  e8:	68 23       	and	r22, r24
  ea:	64 bb       	out	0x14, r22	; 20
  ec:	08 95       	ret
  ee:	84 b3       	in	r24, 0x14	; 20
  f0:	68 2b       	or	r22, r24
  f2:	64 bb       	out	0x14, r22	; 20
  f4:	08 95       	ret
  f6:	44 23       	and	r20, r20
  f8:	19 f0       	breq	.+6      	; 0x100 <gpioPinDirection+0x6e>
  fa:	4f 3f       	cpi	r20, 0xFF	; 255
  fc:	31 f0       	breq	.+12     	; 0x10a <gpioPinDirection+0x78>
  fe:	08 95       	ret
 100:	81 b3       	in	r24, 0x11	; 17
 102:	60 95       	com	r22
 104:	68 23       	and	r22, r24
 106:	61 bb       	out	0x11, r22	; 17
 108:	08 95       	ret
 10a:	81 b3       	in	r24, 0x11	; 17
 10c:	68 2b       	or	r22, r24
 10e:	61 bb       	out	0x11, r22	; 17
 110:	08 95       	ret

00000112 <gpioPinWrite>:
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	99 f0       	breq	.+38     	; 0x13c <gpioPinWrite+0x2a>
 116:	28 f0       	brcs	.+10     	; 0x122 <gpioPinWrite+0x10>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	e9 f0       	breq	.+58     	; 0x156 <gpioPinWrite+0x44>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	41 f1       	breq	.+80     	; 0x170 <gpioPinWrite+0x5e>
 120:	08 95       	ret
 122:	44 23       	and	r20, r20
 124:	31 f0       	breq	.+12     	; 0x132 <gpioPinWrite+0x20>
 126:	4f 3f       	cpi	r20, 0xFF	; 255
 128:	79 f5       	brne	.+94     	; 0x188 <gpioPinWrite+0x76>
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	68 2b       	or	r22, r24
 12e:	6b bb       	out	0x1b, r22	; 27
 130:	08 95       	ret
 132:	8b b3       	in	r24, 0x1b	; 27
 134:	60 95       	com	r22
 136:	68 23       	and	r22, r24
 138:	6b bb       	out	0x1b, r22	; 27
 13a:	08 95       	ret
 13c:	44 23       	and	r20, r20
 13e:	31 f0       	breq	.+12     	; 0x14c <gpioPinWrite+0x3a>
 140:	4f 3f       	cpi	r20, 0xFF	; 255
 142:	11 f5       	brne	.+68     	; 0x188 <gpioPinWrite+0x76>
 144:	88 b3       	in	r24, 0x18	; 24
 146:	68 2b       	or	r22, r24
 148:	68 bb       	out	0x18, r22	; 24
 14a:	08 95       	ret
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	60 95       	com	r22
 150:	68 23       	and	r22, r24
 152:	68 bb       	out	0x18, r22	; 24
 154:	08 95       	ret
 156:	44 23       	and	r20, r20
 158:	31 f0       	breq	.+12     	; 0x166 <gpioPinWrite+0x54>
 15a:	4f 3f       	cpi	r20, 0xFF	; 255
 15c:	a9 f4       	brne	.+42     	; 0x188 <gpioPinWrite+0x76>
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	68 2b       	or	r22, r24
 162:	65 bb       	out	0x15, r22	; 21
 164:	08 95       	ret
 166:	85 b3       	in	r24, 0x15	; 21
 168:	60 95       	com	r22
 16a:	68 23       	and	r22, r24
 16c:	65 bb       	out	0x15, r22	; 21
 16e:	08 95       	ret
 170:	44 23       	and	r20, r20
 172:	31 f0       	breq	.+12     	; 0x180 <gpioPinWrite+0x6e>
 174:	4f 3f       	cpi	r20, 0xFF	; 255
 176:	41 f4       	brne	.+16     	; 0x188 <gpioPinWrite+0x76>
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	68 2b       	or	r22, r24
 17c:	62 bb       	out	0x12, r22	; 18
 17e:	08 95       	ret
 180:	82 b3       	in	r24, 0x12	; 18
 182:	60 95       	com	r22
 184:	68 23       	and	r22, r24
 186:	62 bb       	out	0x12, r22	; 18
 188:	08 95       	ret

0000018a <gpioPinRead>:
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin){
	uint8_t u8_port_data=INIT_VALUE;
	
	switch (u8_port){
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	49 f0       	breq	.+18     	; 0x1a0 <gpioPinRead+0x16>
 18e:	28 f0       	brcs	.+10     	; 0x19a <gpioPinRead+0x10>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	49 f0       	breq	.+18     	; 0x1a6 <gpioPinRead+0x1c>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	51 f0       	breq	.+20     	; 0x1ac <gpioPinRead+0x22>
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <gpioPinRead+0x28>
	
		case GPIOA :
	u8_port_data=u8_pin & PORTA_PIN;
 19a:	89 b3       	in	r24, 0x19	; 25
 19c:	68 23       	and	r22, r24
			break;
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <gpioPinRead+0x2a>
			
			case GPIOB :
	u8_port_data=u8_pin&PORTB_PIN;
 1a0:	86 b3       	in	r24, 0x16	; 22
 1a2:	68 23       	and	r22, r24
	         break;
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <gpioPinRead+0x2a>
			
			case GPIOC :
    u8_port_data=u8_pin &PORTC_PIN;
 1a6:	83 b3       	in	r24, 0x13	; 19
 1a8:	68 23       	and	r22, r24
			break;
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <gpioPinRead+0x2a>
			
 			case GPIOD :
    u8_port_data=u8_pin &PORTD_PIN;
 1ac:	80 b3       	in	r24, 0x10	; 16
 1ae:	68 23       	and	r22, r24
			break;
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <gpioPinRead+0x2a>
	}
	
}

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin){
	uint8_t u8_port_data=INIT_VALUE;
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	61 11       	cpse	r22, r1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <gpioPinRead+0x32>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_port_data>LOW)
      return HIGH ;
	  else 
	  return LOW ;

}
 1bc:	81 95       	neg	r24
 1be:	08 95       	ret

000001c0 <main>:





int main(){
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	61 97       	sbiw	r28, 0x11	; 17
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
	SPI_MASTER_INFO master;
	master. spi_i=SPI_pooling;
 1d4:	19 82       	std	Y+1, r1	; 0x01
	master.spi_dir=SPI_DIR_LSB;
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	8a 83       	std	Y+2, r24	; 0x02
	master.spi_idle=SPI_LOW_IDLE;
 1da:	1b 82       	std	Y+3, r1	; 0x03
	master.spi_sample=SPI_LEADING_PHASE;
 1dc:	1c 82       	std	Y+4, r1	; 0x04
	master.clock_rate=SPI_CLOCK_RATE_4;
 1de:	1d 82       	std	Y+5, r1	; 0x05
	master.spi_speed_control=SPI_NORMAL_SPEED;
 1e0:	1e 82       	std	Y+6, r1	; 0x06
	init_MASTR(master);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e2       	ldi	r21, 0x20	; 32
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 ed 01 	call	0x3da	; 0x3da <init_MASTR>
	
	
	UART_cfg UART1_CFG;
	UART1_CFG.baudrate = 9600;
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	95 e2       	ldi	r25, 0x25	; 37
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	8e 87       	std	Y+14, r24	; 0x0e
 1fc:	9f 87       	std	Y+15, r25	; 0x0f
 1fe:	a8 8b       	std	Y+16, r26	; 0x10
 200:	b9 8b       	std	Y+17, r27	; 0x11
	UART1_CFG.dataBits = UART_Bits_8;
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	88 87       	std	Y+8, r24	; 0x08
	UART1_CFG.mode = UART_Transceiver;
 206:	88 e1       	ldi	r24, 0x18	; 24
 208:	8f 83       	std	Y+7, r24	; 0x07
	UART1_CFG.parity = No_Parity;
 20a:	19 86       	std	Y+9, r1	; 0x09
	UART1_CFG.sampleEdge = RisingEdg;
 20c:	1c 86       	std	Y+12, r1	; 0x0c
	UART1_CFG.stopBits = StopBits_1;
 20e:	1b 86       	std	Y+11, r1	; 0x0b
	UART1_CFG.uartSync = UART_Async;
 210:	1a 86       	std	Y+10, r1	; 0x0a
	UART1_CFG.uartInterrupts = OnRx;
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	8d 87       	std	Y+13, r24	; 0x0d
	UART_Init(&UART1_CFG);
 216:	ce 01       	movw	r24, r28
 218:	07 96       	adiw	r24, 0x07	; 7
 21a:	0e 94 35 03 	call	0x66a	; 0x66a <UART_Init>
	
	
	pushButtonInit(BTN_0);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 81 01 	call	0x302	; 0x302 <pushButtonInit>
	pushButtonInit(BTN_1);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 81 01 	call	0x302	; 0x302 <pushButtonInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x70>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x7a>
 23a:	00 00       	nop
	
	
	
	//char tx_data,rx_data;
	//sevenSegWrite(SEG_0,8);
	while (flag!=1);
 23c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x7c>
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9f e1       	ldi	r25, 0x1F	; 31
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x88>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x8e>
 24e:	00 00       	nop
	_delay_ms(2);
	tr_master(in_spee);
 250:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 254:	0e 94 27 02 	call	0x44e	; 0x44e <tr_master>
	//sevenSegWrite(SEG_0,in_spee);
	//tr_master(in_spee);
	UART_Write((in_spee+48));
 258:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 25c:	80 5d       	subi	r24, 0xD0	; 208
 25e:	0e 94 a1 03 	call	0x742	; 0x742 <UART_Write>
	
	while (1){
		
			if(pushButtonGetStatus(BTN_0)==Pressed)
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 a1 01 	call	0x342	; 0x342 <pushButtonGetStatus>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	b9 f4       	brne	.+46     	; 0x29a <main+0xda>
			{
			while (pushButtonGetStatus(BTN_0)==Pressed);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 a1 01 	call	0x342	; 0x342 <pushButtonGetStatus>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	d9 f3       	breq	.-10     	; 0x26c <main+0xac>
				if (in_spee<10)
 276:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 27a:	8a 30       	cpi	r24, 0x0A	; 10
 27c:	70 f4       	brcc	.+28     	; 0x29a <main+0xda>
				{
					in_spee++;
 27e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <in_spee>
					tr_master(in_spee);
 288:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 28c:	0e 94 27 02 	call	0x44e	; 0x44e <tr_master>
					//sevenSegWrite(SEG_0,in_spee);
					UART_Write((in_spee+48));
 290:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	0e 94 a1 03 	call	0x742	; 0x742 <UART_Write>

				}
			}
			if(pushButtonGetStatus(BTN_1)==Pressed){
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 a1 01 	call	0x342	; 0x342 <pushButtonGetStatus>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	f9 f6       	brne	.-66     	; 0x262 <main+0xa2>
				while (pushButtonGetStatus(BTN_1)==Pressed);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 a1 01 	call	0x342	; 0x342 <pushButtonGetStatus>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	d9 f3       	breq	.-10     	; 0x2a4 <main+0xe4>
				if (in_spee>0)
 2ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 2b2:	88 23       	and	r24, r24
 2b4:	b1 f2       	breq	.-84     	; 0x262 <main+0xa2>
				{
					in_spee--;
 2b6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <in_spee>
					tr_master(in_spee);
 2c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 2c4:	0e 94 27 02 	call	0x44e	; 0x44e <tr_master>
				//	sevenSegWrite(SEG_0,in_spee);
					UART_Write((in_spee+48));
 2c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 2cc:	80 5d       	subi	r24, 0xD0	; 208
 2ce:	0e 94 a1 03 	call	0x742	; 0x742 <UART_Write>
 2d2:	c7 cf       	rjmp	.-114    	; 0x262 <main+0xa2>

000002d4 <__vector_13>:
}
 	
	
	
	ISR(USART_RXC_vect)
	{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	8f 93       	push	r24
		in_spee = UDR;
 2e0:	8c b1       	in	r24, 0x0c	; 12
 2e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <in_spee>
		//UART_Write(in_spee);

		in_spee-=48;
 2e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <in_spee>
 2ea:	80 53       	subi	r24, 0x30	; 48
 2ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <in_spee>
		flag=1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	}
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <pushButtonInit>:
#include "pushButton.h"

#define BOUNCING_TIMEiNm 40

void pushButtonInit(En_buttonId_t en_butotn_id){
	switch(en_butotn_id){
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	61 f0       	breq	.+24     	; 0x31e <pushButtonInit+0x1c>
 306:	28 f0       	brcs	.+10     	; 0x312 <pushButtonInit+0x10>
 308:	82 30       	cpi	r24, 0x02	; 2
 30a:	79 f0       	breq	.+30     	; 0x32a <pushButtonInit+0x28>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	99 f0       	breq	.+38     	; 0x336 <pushButtonInit+0x34>
 310:	08 95       	ret
		case BTN_0:
		gpioPinDirection(BTN_0_GPIO,BTN_0_BIT,INPUT);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	60 e1       	ldi	r22, 0x10	; 16
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
		break;
 31c:	08 95       	ret
		
		case BTN_1:
		gpioPinDirection(BTN_1_GPIO,BTN_1_BIT,INPUT);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
		break;
 328:	08 95       	ret
		
		case BTN_2:
		gpioPinDirection(BTN_2_GPIO,BTN_2_BIT,INPUT);
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
		break;
 334:	08 95       	ret
		
		case BTN_3:
		gpioPinDirection(BTN_3_GPIO,BTN_3_BIT,INPUT);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	68 e0       	ldi	r22, 0x08	; 8
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 340:	08 95       	ret

00000342 <pushButtonGetStatus>:
		break;
	}
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id){
 342:	cf 93       	push	r28
 344:	c8 2f       	mov	r28, r24
	En_buttonStatus_t staut_flag=Released;
	softwareDelayMs(BOUNCING_TIMEiNm);
 346:	68 e2       	ldi	r22, 0x28	; 40
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <softwareDelayMs>
	switch(en_butotn_id){
 352:	c1 30       	cpi	r28, 0x01	; 1
 354:	61 f0       	breq	.+24     	; 0x36e <pushButtonGetStatus+0x2c>
 356:	28 f0       	brcs	.+10     	; 0x362 <pushButtonGetStatus+0x20>
 358:	c2 30       	cpi	r28, 0x02	; 2
 35a:	79 f0       	breq	.+30     	; 0x37a <pushButtonGetStatus+0x38>
 35c:	c3 30       	cpi	r28, 0x03	; 3
 35e:	99 f0       	breq	.+38     	; 0x386 <pushButtonGetStatus+0x44>
 360:	18 c0       	rjmp	.+48     	; 0x392 <pushButtonGetStatus+0x50>
		
		case BTN_0:
		staut_flag=gpioPinRead(BTN_0_GPIO,BTN_0_BIT);
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioPinRead>
 36a:	c8 2f       	mov	r28, r24
		break;
 36c:	13 c0       	rjmp	.+38     	; 0x394 <pushButtonGetStatus+0x52>
		
		case BTN_1:
		staut_flag=gpioPinRead(BTN_1_GPIO,BTN_1_BIT);
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioPinRead>
 376:	c8 2f       	mov	r28, r24
		break;
 378:	0d c0       	rjmp	.+26     	; 0x394 <pushButtonGetStatus+0x52>
	
		
		case BTN_2:
		staut_flag=gpioPinRead(BTN_2_GPIO,BTN_2_BIT);
 37a:	64 e0       	ldi	r22, 0x04	; 4
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioPinRead>
 382:	c8 2f       	mov	r28, r24
		break;
 384:	07 c0       	rjmp	.+14     	; 0x394 <pushButtonGetStatus+0x52>
		
		
		case BTN_3:
		staut_flag=gpioPinRead(BTN_3_GPIO,BTN_3_BIT);
 386:	68 e0       	ldi	r22, 0x08	; 8
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 c5 00 	call	0x18a	; 0x18a <gpioPinRead>
 38e:	c8 2f       	mov	r28, r24
		
		break;
 390:	01 c0       	rjmp	.+2      	; 0x394 <pushButtonGetStatus+0x52>
		break;
	}
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id){
	En_buttonStatus_t staut_flag=Released;
 392:	c0 e0       	ldi	r28, 0x00	; 0
		case BTN_3:
		staut_flag=gpioPinRead(BTN_3_GPIO,BTN_3_BIT);
		
		break;
	}
		softwareDelayMs(BOUNCING_TIMEiNm);
 394:	68 e2       	ldi	r22, 0x28	; 40
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <softwareDelayMs>
		
		if (staut_flag!=LOW)
 3a0:	c1 11       	cpse	r28, r1
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <pushButtonGetStatus+0x66>
		return Pressed;
		
	return staut_flag;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <pushButtonGetStatus+0x68>
		break;
	}
		softwareDelayMs(BOUNCING_TIMEiNm);
		
		if (staut_flag!=LOW)
		return Pressed;
 3a8:	82 e0       	ldi	r24, 0x02	; 2
		
	return staut_flag;
}
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <softwareDelayMs>:
 *
 * Created: 18/01/2020 12:25:22 ص
 *  Author: TOSHIBA
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 3ae:	ab 01       	movw	r20, r22
 3b0:	bc 01       	movw	r22, r24
	uint32_t  s=0;
	for(;u32_delay_in_ms;u32_delay_in_ms--){
 3b2:	41 15       	cp	r20, r1
 3b4:	51 05       	cpc	r21, r1
 3b6:	61 05       	cpc	r22, r1
 3b8:	71 05       	cpc	r23, r1
 3ba:	59 f4       	brne	.+22     	; 0x3d2 <softwareDelayMs+0x24>
 3bc:	08 95       	ret
 3be:	01 96       	adiw	r24, 0x01	; 1
		        s=0;
		for (;s<2285; ){
 3c0:	8d 3e       	cpi	r24, 0xED	; 237
 3c2:	28 e0       	ldi	r18, 0x08	; 8
 3c4:	92 07       	cpc	r25, r18
 3c6:	d9 f7       	brne	.-10     	; 0x3be <softwareDelayMs+0x10>
 *  Author: TOSHIBA
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
	uint32_t  s=0;
	for(;u32_delay_in_ms;u32_delay_in_ms--){
 3c8:	41 50       	subi	r20, 0x01	; 1
 3ca:	51 09       	sbc	r21, r1
 3cc:	61 09       	sbc	r22, r1
 3ce:	71 09       	sbc	r23, r1
 3d0:	19 f0       	breq	.+6      	; 0x3d8 <softwareDelayMs+0x2a>
 *
 * Created: 18/01/2020 12:25:22 ص
 *  Author: TOSHIBA
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	f3 cf       	rjmp	.-26     	; 0x3be <softwareDelayMs+0x10>
 3d8:	08 95       	ret

000003da <init_MASTR>:
	 while((SPSR&SPIF)==0);
	 
    data =SPSR;
	 data=SPDR;
	 return data;
         }
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	00 d0       	rcall	.+0      	; 0x3e0 <init_MASTR+0x6>
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <init_MASTR+0x8>
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <init_MASTR+0xa>
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	49 83       	std	Y+1, r20	; 0x01
 3ea:	5a 83       	std	Y+2, r21	; 0x02
 3ec:	6b 83       	std	Y+3, r22	; 0x03
 3ee:	7c 83       	std	Y+4, r23	; 0x04
 3f0:	8d 83       	std	Y+5, r24	; 0x05
 3f2:	9e 83       	std	Y+6, r25	; 0x06
 3f4:	1d b8       	out	0x0d, r1	; 13
 3f6:	1e b8       	out	0x0e, r1	; 14
 3f8:	1f b8       	out	0x0f, r1	; 15
 3fa:	4f ef       	ldi	r20, 0xFF	; 255
 3fc:	60 eb       	ldi	r22, 0xB0	; 176
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	60 e4       	ldi	r22, 0x40	; 64
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 40e:	4f ef       	ldi	r20, 0xFF	; 255
 410:	60 e1       	ldi	r22, 0x10	; 16
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
 418:	c4 9a       	sbi	0x18, 4	; 24
 41a:	9d b1       	in	r25, 0x0d	; 13
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	89 2b       	or	r24, r25
 420:	80 65       	ori	r24, 0x50	; 80
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	89 2b       	or	r24, r25
 426:	9b 81       	ldd	r25, Y+3	; 0x03
 428:	89 2b       	or	r24, r25
 42a:	9c 81       	ldd	r25, Y+4	; 0x04
 42c:	89 2b       	or	r24, r25
 42e:	9d 81       	ldd	r25, Y+5	; 0x05
 430:	89 2b       	or	r24, r25
 432:	8d b9       	out	0x0d, r24	; 13
 434:	9e b1       	in	r25, 0x0e	; 14
 436:	8e 81       	ldd	r24, Y+6	; 0x06
 438:	89 2b       	or	r24, r25
 43a:	8e b9       	out	0x0e, r24	; 14
 43c:	26 96       	adiw	r28, 0x06	; 6
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <tr_master>:
 44e:	c4 98       	cbi	0x18, 4	; 24
 450:	8f b9       	out	0x0f, r24	; 15
 452:	9f b1       	in	r25, 0x0f	; 15
 454:	92 bf       	out	0x32, r25	; 50
 456:	84 bd       	out	0x24, r24	; 36
 458:	77 9b       	sbis	0x0e, 7	; 14
 45a:	fe cf       	rjmp	.-4      	; 0x458 <tr_master+0xa>
 45c:	c4 9a       	sbi	0x18, 4	; 24
 45e:	08 95       	ret

00000460 <__vector_12>:

void tr_slave (char data);
char  re_master (void);

  ISR(SPI_STC_vect)
           {
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	8f 93       	push	r24
		spi_flag=1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <spi_flag>
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_11>:
 TCNT2= tcnt2_on_pwm;
 OCR2=ocr_value;
 gpioPinWrite(T2_PWM_GPIO,T2_PWM_BIT,HIGH);
 TCCR2|=T2_PRESCALER_1024;

 }
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
 4a0:	4f ef       	ldi	r20, 0xFF	; 255
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
 4aa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <tcnt0_on_pwm>
 4ae:	82 bf       	out	0x32, r24	; 50
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__vector_10>:
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_9>:
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
 542:	4f ef       	ldi	r20, 0xFF	; 255
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
 54c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <tcnt1_on_pwm>
 550:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <tcnt1_on_pwm+0x1>
 554:	9d bd       	out	0x2d, r25	; 45
 556:	8c bd       	out	0x2c, r24	; 44
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_7>:
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <__vector_5>:
 MY_ISR(TIMER2_OVF_vect){
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
	 gpioPinWrite(T2_PWM_GPIO,T2_PWM_BIT,HIGH);
 5ea:	4f ef       	ldi	r20, 0xFF	; 255
 5ec:	64 e0       	ldi	r22, 0x04	; 4
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
	 TCNT2=tcnt2_on_pwm;
 5f4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tcnt2_on_pwm>
 5f8:	84 bd       	out	0x24, r24	; 36
 }
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <__vector_4>:

 MY_ISR(TIMER2_COMP_vect){
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
	 gpioPinWrite(T2_PWM_GPIO,T2_PWM_BIT,LOW);
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	64 e0       	ldi	r22, 0x04	; 4
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	0e 94 89 00 	call	0x112	; 0x112 <gpioPinWrite>
 }
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	bf 91       	pop	r27
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	7f 91       	pop	r23
 656:	6f 91       	pop	r22
 658:	5f 91       	pop	r21
 65a:	4f 91       	pop	r20
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <UART_Init>:

#include "UART.h"


void UART_Init(UART_cfg* uart_cfg)
{
 66a:	cf 92       	push	r12
 66c:	df 92       	push	r13
 66e:	ef 92       	push	r14
 670:	ff 92       	push	r15
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	ec 01       	movw	r28, r24
	//UCSRC = 0x00;
	//UCSRB = 0x00;
	//UCSRB |= (1<<4 | 1<<3); 	
	// Set The UART Mode OF Operation
	//CLEAR_BIT(UCSRB, 2);
	UCSRB |= (uart_cfg->mode | uart_cfg->uartInterrupts);
 678:	9a b1       	in	r25, 0x0a	; 10
 67a:	88 81       	ld	r24, Y
 67c:	89 2b       	or	r24, r25
 67e:	9e 81       	ldd	r25, Y+6	; 0x06
 680:	89 2b       	or	r24, r25
 682:	8a b9       	out	0x0a, r24	; 10
	//UCSRC |= 0x80;
	// Set The UART Synchronization
	uart_control |= (uart_cfg->uartSync | uart_cfg->sampleEdge | uart_cfg->dataBits | uart_cfg->parity | uart_cfg->stopBits);
	UCSRC |= uart_control;
 684:	20 b5       	in	r18, 0x20	; 32
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9d 81       	ldd	r25, Y+5	; 0x05
 68a:	89 2b       	or	r24, r25
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	99 81       	ldd	r25, Y+1	; 0x01
 690:	89 2b       	or	r24, r25
 692:	9a 81       	ldd	r25, Y+2	; 0x02
 694:	89 2b       	or	r24, r25
 696:	9c 81       	ldd	r25, Y+4	; 0x04
 698:	89 2b       	or	r24, r25
 69a:	82 2b       	or	r24, r18
 69c:	80 bd       	out	0x20, r24	; 32
	//UCSRC = 0x86;
	// Set The UART Baud Rate
	UBRRL = ((F_cpu/(16*uart_cfg->baudrate)) - 1);
 69e:	8f 81       	ldd	r24, Y+7	; 0x07
 6a0:	98 85       	ldd	r25, Y+8	; 0x08
 6a2:	a9 85       	ldd	r26, Y+9	; 0x09
 6a4:	ba 85       	ldd	r27, Y+10	; 0x0a
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	aa 1f       	adc	r26, r26
 6ac:	bb 1f       	adc	r27, r27
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	9c 01       	movw	r18, r24
 6b8:	ad 01       	movw	r20, r26
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	44 1f       	adc	r20, r20
 6c0:	55 1f       	adc	r21, r21
 6c2:	22 0f       	add	r18, r18
 6c4:	33 1f       	adc	r19, r19
 6c6:	44 1f       	adc	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	0f 2e       	mov	r0, r31
 6cc:	c1 2c       	mov	r12, r1
 6ce:	f4 e2       	ldi	r31, 0x24	; 36
 6d0:	df 2e       	mov	r13, r31
 6d2:	f4 ef       	ldi	r31, 0xF4	; 244
 6d4:	ef 2e       	mov	r14, r31
 6d6:	f1 2c       	mov	r15, r1
 6d8:	f0 2d       	mov	r31, r0
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	0e 94 a5 03 	call	0x74a	; 0x74a <__udivmodsi4>
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	29 b9       	out	0x09, r18	; 9
	UBRRH = ((F_cpu/(16*uart_cfg->baudrate)) - 1)>>8;
 6e6:	8f 81       	ldd	r24, Y+7	; 0x07
 6e8:	98 85       	ldd	r25, Y+8	; 0x08
 6ea:	a9 85       	ldd	r26, Y+9	; 0x09
 6ec:	ba 85       	ldd	r27, Y+10	; 0x0a
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	aa 1f       	adc	r26, r26
 6fc:	bb 1f       	adc	r27, r27
 6fe:	9c 01       	movw	r18, r24
 700:	ad 01       	movw	r20, r26
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	44 1f       	adc	r20, r20
 708:	55 1f       	adc	r21, r21
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	44 1f       	adc	r20, r20
 710:	55 1f       	adc	r21, r21
 712:	c7 01       	movw	r24, r14
 714:	b6 01       	movw	r22, r12
 716:	0e 94 a5 03 	call	0x74a	; 0x74a <__udivmodsi4>
 71a:	da 01       	movw	r26, r20
 71c:	c9 01       	movw	r24, r18
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	a1 09       	sbc	r26, r1
 722:	b1 09       	sbc	r27, r1
 724:	89 2f       	mov	r24, r25
 726:	9a 2f       	mov	r25, r26
 728:	ab 2f       	mov	r26, r27
 72a:	bb 27       	eor	r27, r27
 72c:	80 bd       	out	0x20, r24	; 32
	// Set The UART Data Sampling Edge
	// Set The UART Data Bits
	// Set The UART Parity Option
	// Set The UART Stop Bits
	// Set The UART Interrupt Mode
	SREG  |= (0x80);
 72e:	8f b7       	in	r24, 0x3f	; 63
 730:	80 68       	ori	r24, 0x80	; 128
 732:	8f bf       	out	0x3f, r24	; 63
}
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	ff 90       	pop	r15
 73a:	ef 90       	pop	r14
 73c:	df 90       	pop	r13
 73e:	cf 90       	pop	r12
 740:	08 95       	ret

00000742 <UART_Write>:

void UART_Write(uint8_t data)
{
	// Wait For Empty Transmit Budder
	while(!(UCSRA & (1<<5)));
 742:	5d 9b       	sbis	0x0b, 5	; 11
 744:	fe cf       	rjmp	.-4      	; 0x742 <UART_Write>
	// Write The Data To The Buffer & Send!
	UDR = data;
 746:	8c b9       	out	0x0c, r24	; 12
 748:	08 95       	ret

0000074a <__udivmodsi4>:
 74a:	a1 e2       	ldi	r26, 0x21	; 33
 74c:	1a 2e       	mov	r1, r26
 74e:	aa 1b       	sub	r26, r26
 750:	bb 1b       	sub	r27, r27
 752:	fd 01       	movw	r30, r26
 754:	0d c0       	rjmp	.+26     	; 0x770 <__udivmodsi4_ep>

00000756 <__udivmodsi4_loop>:
 756:	aa 1f       	adc	r26, r26
 758:	bb 1f       	adc	r27, r27
 75a:	ee 1f       	adc	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	a2 17       	cp	r26, r18
 760:	b3 07       	cpc	r27, r19
 762:	e4 07       	cpc	r30, r20
 764:	f5 07       	cpc	r31, r21
 766:	20 f0       	brcs	.+8      	; 0x770 <__udivmodsi4_ep>
 768:	a2 1b       	sub	r26, r18
 76a:	b3 0b       	sbc	r27, r19
 76c:	e4 0b       	sbc	r30, r20
 76e:	f5 0b       	sbc	r31, r21

00000770 <__udivmodsi4_ep>:
 770:	66 1f       	adc	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	1a 94       	dec	r1
 77a:	69 f7       	brne	.-38     	; 0x756 <__udivmodsi4_loop>
 77c:	60 95       	com	r22
 77e:	70 95       	com	r23
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	9b 01       	movw	r18, r22
 786:	ac 01       	movw	r20, r24
 788:	bd 01       	movw	r22, r26
 78a:	cf 01       	movw	r24, r30
 78c:	08 95       	ret

0000078e <_exit>:
 78e:	f8 94       	cli

00000790 <__stop_program>:
 790:	ff cf       	rjmp	.-2      	; 0x790 <__stop_program>
